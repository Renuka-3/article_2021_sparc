feature_table = otu_data;
sample_var = "Sample";
group_var = NULL
out_cut = 0.05;
zero_cut = 0.90;
lib_cut = 1000;
neg_lb = FALSE
prepro = feature_table_pre_process(feature_table,
meta_data,
sample_var,
group_var,
out_cut,
zero_cut,
lib_cut,
neg_lb)
feature_table = prepro$feature_table # Preprocessed feature table
meta_data = prepro$meta_data # Preprocessed metadata
struc_zero = prepro$structure_zeros # Structural zero info
# Step 2: ANCOM
main_var <- "Geographical_location";
p_adj_method <- "BH";
alpha <- 0.05
adj_formula <- NULL;
rand_formula <- NULL
res <- ANCOM(feature_table, meta_data, struc_zero,
main_var, p_adj_method,
alpha, adj_formula, rand_formula)
res.sorted <- res$out %>% arrange(desc(W))
top.taxa <- res.sorted[which(res.sorted[,3]), "taxa_id"]
head(res.sorted)
ps <- microbiome::transform(phy, "compositional")
d <- meta(ps)
library(beeswarm)
for (tax in top.taxa) {
d$taxa <- abundances(ps)[tax, ]
# d$gen <- taxa(ps)["genus", ]
p <- ggplot(d, aes(x = Geographical_location, y = taxa)) +
geom_boxplot() +
ggbeeswarm::geom_beeswarm() +
scale_y_log10()+
theme(axis.text.x = element_text(angle = 360, hjust = 1)) +
#labs(x = "Location", y = "Abundance (CLR)", title = map_levels(tax, from='tax', to='genus',ps))
labs(x = "Location", y = "Abundance (CLR)", title = as.vector(tax_table(ps)[tax, "genus"]))
print(p)
}
library(knitr)
library(knitcitations)
library(microbiome)
library(phyloseq)
library(ggplot2)
library(reshape2)
library(tidyverse)
library(dada2)
library(dplyr)
library(microbiome)
library(microbiome)
library(phyloseq)
library(vegan)
theme_set(theme_bw(20))
knitr::opts_chunk$set(fig.width=10, fig.height=10, message=FALSE, warning=FALSE)
knitr::opts_chunk$set(fig.path="figure_location/")
opts_chunk$set(dev="CairoPNG")
# Was created with: source("create_phyloseq.R")
phy <- readRDS("data/processed/phyloseq/phy20.1.RDS")
method <- "PCoA"
trans <- "compositional"
distance <- "bray"
index <- "diversity_shannon"
# Estimate alpha diversities
A <- alpha(phy)
b <- meta(phy)
b2 <- bind_cols(b,A)
is.data.frame(b)
is.data.frame(b2)
z<- sapply(split(b2$diversity_shannon, b2$Geographical_location), mean)
kable(z)
theme_set(theme_bw(base_size=25))
library(Cairo)
df <- meta(phy)
df <- bind_cols(df, A)
df$index <- df[[index]]
pv <- kruskal.test(data = df, index ~ factor(Geographical_location))$p.value
library(ggbeeswarm)
p1 <- ggplot(df, aes(x = Geographical_location, y = index)) +
geom_boxplot() +
geom_jitter(width = 0.1) +
theme(axis.text.x = element_text(angle = 0, hjust = 1)) + theme(legend.position = "none")+
labs(y = "Shannon Diversity",
x = "",
title = "Location")
print(p1)
library(knitr)
library(knitcitations)
library(microbiome)
library(phyloseq)
library(ggplot2)
library(reshape2)
library(tidyverse)
library(dada2)
library(dplyr)
library(microbiome)
library(microbiome)
library(phyloseq)
library(vegan)
theme_set(theme_bw(20))
knitr::opts_chunk$set(fig.width=10, fig.height=10, message=FALSE, warning=FALSE)
knitr::opts_chunk$set(fig.path="figure_location/")
opts_chunk$set(dev="CairoPNG")
# Was created with: source("create_phyloseq.R")
phy <- readRDS("data/processed/phyloseq/phy20.1.RDS")
method <- "PCoA"
trans <- "compositional"
distance <- "bray"
index <- "diversity_shannon"
# Estimate alpha diversities
A <- alpha(phy)
b <- meta(phy)
b2 <- bind_cols(b,A)
is.data.frame(b)
is.data.frame(b2)
z<- sapply(split(b2$diversity_shannon, b2$Geographical_location), mean)
f <- sapply(split(b2$diversity_shannon, b2$Geographical_location), sd)
v <- cbind(z,f)
kable(v)
theme_set(theme_bw(base_size=25))
library(Cairo)
df <- meta(phy)
df <- bind_cols(df, A)
df$index <- df[[index]]
pv <- kruskal.test(data = df, index ~ factor(Geographical_location))$p.value
kruskal.test(data = df, index ~factor(Geographical_location))
library(ggbeeswarm)
library(ggsignif)
jpeg(file= "figure_location.jpeg", quality = 300)
p1 <- ggplot(df, aes(x = Geographical_location, y = index)) +
geom_boxplot(color = "black") +
geom_jitter(width = 0.1) +
theme(axis.text.x = element_text(angle = 0, hjust = 0.5)) + theme(legend.position = "none")+
labs(y = "Shannon Diversity",
x = "",
title = "Geographical location")
#geom_signif(comparisons = list(c("Ahmednagar", "Nashik", "Pune")),map_signif_level = TRUE)
print(p1)
#dev.off()
#geom_signif(comparisons = list(c("Ahmednagar", "Nashik"), c("Ahmednagar", "Pune"), c("Nashik", "Pune")),
#map_signif_level = TRUE)
theme_set(theme_bw(base_size=25))
sp <- aggregate_taxa(phy, "genus")
core.taxa <- core_members(microbiome::transform(sp, "compositional"), detection = 0.1/100, prevalence=20/100) # FOcus on core tzxa
sp <- microbiome::transform(sp, "clr")
sp.comp <- microbiome::transform(microbiome::transform(sp, "shift", shift=1), "compositional")
# Statistical testing done here at CLR abundances and filtering out rare taxa
pvs <- sapply(core.taxa, function (i) {kruskal.test(abundances(sp)[i,] ~ meta(sp)[, "Geographical_location"])$p.value})
padj <- p.adjust(pvs, method = "fdr")
toptaxa <- names(which(padj < 0.05))
#names(pvs) <- gsub(names(pvs), pattern = "Propionibacterium", replacement = "Propionibacterium/Cutibacterium")
# Visualization done for compositional data for intuitive presentation
theme_set(theme_bw(20))
# Just pick the top taza for visu
df <- psmelt(prune_taxa(toptaxa, sp.comp))
df$Genus<- gsub((df$genus), pattern = "Propionibacterium", replacement = "Propionibacterium/Cutibacterium")
p <- ggplot(df, aes(x = Genus, y = Abundance,
fill = Geographical_location))+
labs(y = " Relative abundance (%)", x = '') +
geom_boxplot() +
coord_flip() +
#scale_y_log10(label = scales::percent) +
scale_y_continuous(label = scales::percent) +
labs(fill = " Geographical location")
print(p)
#geom_signif(comparisons = list(c("Ahmednagar", "Nashik", "Pune")),map_signif_level = TRUE)
print(p1)
theme_set(theme_bw(base_size=25))
library(readr)
library(tidyverse)
otu_data <- abundances(phy)
meta_data <- meta(phy)
# To get this, clone
# https://github.com/FrederickHuangLin/ANCOM.git
library(compositions)
source("ANCOM/scripts/ancom_v2.1.R")
# Step 1: Data preprocessing
feature_table = otu_data;
sample_var = "Sample";
group_var = NULL
out_cut = 0.05;
zero_cut = 0.90;
lib_cut = 1000;
neg_lb = FALSE
prepro = feature_table_pre_process(feature_table,
meta_data,
sample_var,
group_var,
out_cut,
zero_cut,
lib_cut,
neg_lb)
feature_table = prepro$feature_table # Preprocessed feature table
meta_data = prepro$meta_data # Preprocessed metadata
struc_zero = prepro$structure_zeros # Structural zero info
# Step 2: ANCOM
main_var <- "Geographical_location";
p_adj_method <- "BH";
alpha <- 0.05
adj_formula <- NULL;
rand_formula <- NULL
res <- ANCOM(feature_table, meta_data, struc_zero,
main_var, p_adj_method,
alpha, adj_formula, rand_formula)
res.sorted <- res$out %>% arrange(desc(W))
top.taxa <- res.sorted[which(res.sorted[,3]), "taxa_id"]
head(res.sorted)
ps <- microbiome::transform(phy, "compositional")
d <- meta(ps)
library(beeswarm)
for (tax in top.taxa) {
d$taxa <- abundances(ps)[tax, ]
# d$gen <- taxa(ps)["genus", ]
p <- ggplot(d, aes(x = Geographical_location, y = taxa)) +
geom_boxplot() +
ggbeeswarm::geom_beeswarm() +
scale_y_log10()+
theme(axis.text.x = element_text(angle = 360, hjust = 1)) +
#labs(x = "Location", y = "Abundance (CLR)", title = map_levels(tax, from='tax', to='genus',ps))
labs(x = "Location", y = "Abundance (CLR)", title = as.vector(tax_table(ps)[tax, "genus"]))
print(p)
}
d$taxa <- abundances(ps)[tax, ]
p <- ggplot(d, aes(x = Geographical_location, y = taxa)) +
geom_boxplot() +
ggbeeswarm::geom_beeswarm() +
scale_y_log10()+
theme(axis.text.x = element_text(angle = 360, hjust = 1)) +
#labs(x = "Location", y = "Abundance (CLR)", title = map_levels(tax, from='tax', to='genus',ps))
labs(x = "Location", y = "Abundance (CLR)", title = as.vector(tax_table(ps)[tax, "genus"]))
print(p)
library(beeswarm)
for (tax in top.taxa) {
d$taxa <- abundances(ps)[tax, ]
# d$gen <- taxa(ps)["genus", ]
p <- ggplot(d, aes(x = Geographical_location, y = taxa)) +
geom_boxplot() +
ggbeeswarm::geom_beeswarm() +
scale_y_log10()+
theme(axis.text.x = element_text(angle = 360, hjust = 1)) +
#labs(x = "Location", y = "Abundance (CLR)", title = map_levels(tax, from='tax', to='genus',ps))
labs(x = "Location", y = "Abundance (CLR)", title = as.vector(tax_table(ps)[tax, "genus"]))
print(p)
}
d$taxa <- abundances(ps)[tax, ]
theme_set(theme_bw(base_size=25))
library(readr)
library(tidyverse)
otu_data <- abundances(phy)
meta_data <- meta(phy)
# To get this, clone
# https://github.com/FrederickHuangLin/ANCOM.git
library(compositions)
source("ANCOM/scripts/ancom_v2.1.R")
# Step 1: Data preprocessing
feature_table = otu_data;
sample_var = "Sample";
group_var = NULL
out_cut = 0.05;
zero_cut = 0.90;
lib_cut = 1000;
neg_lb = FALSE
prepro = feature_table_pre_process(feature_table,
meta_data,
sample_var,
group_var,
out_cut,
zero_cut,
lib_cut,
neg_lb)
feature_table = prepro$feature_table # Preprocessed feature table
meta_data = prepro$meta_data # Preprocessed metadata
struc_zero = prepro$structure_zeros # Structural zero info
# Step 2: ANCOM
main_var <- "Geographical_location";
p_adj_method <- "BH";
alpha <- 0.05
adj_formula <- NULL;
rand_formula <- NULL
res <- ANCOM(feature_table, meta_data, struc_zero,
main_var, p_adj_method,
alpha, adj_formula, rand_formula)
s1 <- sample_names(subset_samples(ps, Geographical_location == "Ahmednagar"))
s2 <- sample_names(subset_samples(ps, Geographical_location == "Nashik"))
s3 <- sample_names(subset_samples(ps, Geographical_location == "Pune"))
rp<- rowMeans(abundances(pseq)[, s1])/rowMeans(abundances(pseq)[, s2])/rowMeans(abundances(pseq)[, s3])
sample_data(ps)$rp<- rowMeans(abundances(pseq)[, s1])/rowMeans(abundances(pseq)[, s2])/rowMeans(abundances(pseq)[, s3])
theme_set(theme_bw(base_size=25))
library(readr)
library(tidyverse)
otu_data <- abundances(phy)
meta_data <- meta(phy)
# To get this, clone
# https://github.com/FrederickHuangLin/ANCOM.git
library(compositions)
source("ANCOM/scripts/ancom_v2.1.R")
# Step 1: Data preprocessing
feature_table = otu_data;
sample_var = "Sample";
group_var = NULL
out_cut = 0.05;
zero_cut = 0.90;
lib_cut = 1000;
neg_lb = FALSE
prepro = feature_table_pre_process(feature_table,
meta_data,
sample_var,
group_var,
out_cut,
zero_cut,
lib_cut,
neg_lb)
feature_table = prepro$feature_table # Preprocessed feature table
meta_data = prepro$meta_data # Preprocessed metadata
struc_zero = prepro$structure_zeros # Structural zero info
# Step 2: ANCOM
main_var <- "Geographical_location";
p_adj_method <- "BH";
alpha <- 0.05
adj_formula <- NULL;
rand_formula <- NULL
res <- ANCOM(feature_table, meta_data, struc_zero,
main_var, p_adj_method,
alpha, adj_formula, rand_formula)
res.sorted <- res$out %>% arrange(desc(W))
top.taxa <- res.sorted[which(res.sorted[,3]), "taxa_id"]
head(res.sorted)
ps <- microbiome::transform(phy, "compositional")
d <- meta(ps)
library(beeswarm)
for (tax in top.taxa) {
d$taxa <- abundances(ps)[tax, ]
# d$gen <- taxa(ps)["genus", ]
p <- ggplot(d, aes(x = Geographical_location, y = taxa)) +
geom_boxplot() +
ggbeeswarm::geom_beeswarm() +
scale_y_log10()+
theme(axis.text.x = element_text(angle = 360, hjust = 1)) +
#labs(x = "Location", y = "Abundance (CLR)", title = map_levels(tax, from='tax', to='genus',ps))
labs(x = "Location", y = "Abundance (CLR)", title = as.vector(tax_table(ps)[tax, "genus"]))
print(p)
}
p <- ggplot(d, aes(x = Geographical_location, y = taxa))
p <- ggplot(d, aes(x = Geographical_location, y = taxa)) +
geom_boxplot()
print(p)
p <- ggplot(d, aes(x = Geographical_location, y = taxa)) +
geom_boxplot() +
ggbeeswarm::geom_beeswarm()
print(p)
p <- ggplot(d, aes(x = Geographical_location, y = taxa)) +
geom_boxplot() +
ggbeeswarm::geom_beeswarm() +
scale_y_log10()
print(p)
head(d)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(phyloseq)
library(dada2)
library(readxl)
library(dplyr)
library(knitr)
library(knitcitations)
library(microbiome)
library(phyloseq)
library(ggplot2)
library(reshape2)
library(tidyverse)
library(dada2)
library(dplyr)
library(ggsignif)
theme_set(theme_bw(20))
knitr::opts_chunk$set(fig.width=10, fig.height=10, message=FALSE, warning=FALSE)
knitr::opts_chunk$set(fig.path="figure_diet/")
# Was created with: source("create_phyloseq.R")
phy <- readRDS("data/processed/phyloseq/phy20.1.RDS")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(phyloseq)
library(dada2)
library(readxl)
library(dplyr)
library(knitr)
library(knitcitations)
library(microbiome)
library(phyloseq)
library(ggplot2)
library(reshape2)
library(tidyverse)
library(dada2)
library(dplyr)
library(ggsignif)
theme_set(theme_bw(20))
knitr::opts_chunk$set(fig.width=10, fig.height=10, message=FALSE, warning=FALSE)
knitr::opts_chunk$set(fig.path="figure_diet/")
# Was created with: source("create_phyloseq.R")
phy <- readRDS("data/processed/phyloseq/phy20.1.RDS")
library(microbiome)
opts_chunk$set(dev="CairoPNG")
# Estimate alpha diversities
A <- alpha(phy)
index <- "diversity_shannon"
#head(A)
t <- meta(phy)
t2 <- bind_cols(t,A)
is.data.frame(t)
is.data.frame(t2)
s <- sapply(split(t2$diversity_shannon, t2$Diet), mean)
g <- sapply(split(t2$diversity_shannon, t2$Diet), sd)
y <- cbind(s,g)
kable(y)
theme_set(theme_bw(base_size = 25))
library(Cairo)
df <- meta(phy)
df <- bind_cols(df, A)
df$index <- df[[index]]
pv <- wilcox.test(data = df, index ~ factor(Diet))$p.value
wilcox.test(data = df, index ~factor(Diet))
library(ggbeeswarm)
library(ggsignif)
jpeg(file= "figure_diet.jpeg", quality = 300)
p1 <- ggplot(df, aes(x = Diet, y = index)) +
geom_boxplot() +
geom_jitter(width = 0.05) +
theme(axis.text.x = element_text(angle = 0, hjust = 0.5),axis.title.x = element_text()) +scale_x_discrete(limits = c("Mixed", "Veg"),
labels = c("Mixed", "Vegetarian")) +theme(legend.position = "none")+
labs(y = "Shannon Diversity",
x = "",
title = "Diet") #+ geom_signif(comparisons = list(c("Mixed", "Veg")), map_signif_level = TRUE)
print(p1)
dev.off()
theme_set(theme_bw(base_size = 25))
library(Cairo)
df <- meta(phy)
df <- bind_cols(df, A)
df$index <- df[[index]]
pv <- wilcox.test(data = df, index ~ factor(Diet))$p.value
wilcox.test(data = df, index ~factor(Diet))
library(ggbeeswarm)
library(ggsignif)
jpeg(file= "figure_diet.jpeg", quality = 300)
p1 <- ggplot(df, aes(x = Diet, y = index)) +
geom_boxplot() +
geom_jitter(width = 0.05) +
theme(axis.text.x = element_text(angle = 0, hjust = 0.5),axis.title.x = element_text()) +scale_x_discrete(limits = c("Mixed", "Veg"),
labels = c("Mixed", "Vegetarian")) +theme(legend.position = "none")+
labs(y = "Shannon Diversity",
x = "",
title = "Diet") #+ geom_signif(comparisons = list(c("Mixed", "Veg")), map_signif_level = TRUE)
print(p1)
#dev.off()
theme_set(theme_bw(base_size = 25))
library(Cairo)
df <- meta(phy)
df <- bind_cols(df, A)
df$index <- df[[index]]
pv <- wilcox.test(data = df, index ~ factor(Diet))$p.value
wilcox.test(data = df, index ~factor(Diet))
library(ggbeeswarm)
library(ggsignif)
#jpeg(file= "figure_diet.jpeg", quality = 300)
p1 <- ggplot(df, aes(x = Diet, y = index)) +
geom_boxplot() +
geom_jitter(width = 0.05) +
theme(axis.text.x = element_text(angle = 0, hjust = 0.5),axis.title.x = element_text()) +scale_x_discrete(limits = c("Mixed", "Veg"),
labels = c("Mixed", "Vegetarian")) +theme(legend.position = "none")+
labs(y = "Shannon Diversity",
x = "",
title = "Diet") #+ geom_signif(comparisons = list(c("Mixed", "Veg")), map_signif_level = TRUE)
print(p1)
#dev.off()
library(microbiome)
library(phyloseq)
library(vegan)
opts_chunk$set(dev="CairoPNG")
method <- "PCoA"
trans <- "compositional"
distance <- "bray"
theme_set(theme_bw(base_size=25))
library(microbiome)
p <- plot_landscape(microbiome::transform(phy , "compositional"),
distance = "bray",
method = "PCoA",
size = 3,
col = "Diet",
shading = FALSE) +
scale_colour_brewer(palette = "Set1")	+labs(title = "Diet")
print(p)
#p + guides(color = guide_legend(title = "Diet"))"
library(microbiome)
library(ggplot2)
library(dplyr)
pseq <- phy# Rename the example data
data = microbiome::meta(phy)
# Pick relative abundances (compositional) and sample metadata
pseq.rel <- microbiome::transform(pseq, "compositional")
otu <- abundances(pseq.rel)
meta <- meta(pseq.rel)
library(vegan)
library(phyloseq)
permanova <- adonis(t(otu) ~ Diet,
data = meta(phy), permutations=99, method = "bray")
# P-value
print(as.data.frame(permanova$aov.tab)["Diet", "Pr(>F)"])
dist <- vegdist(t(otu))
anova(betadisper(dist, meta$Diet))
