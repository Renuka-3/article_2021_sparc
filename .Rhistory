col = "Geographical_location",
shading = FALSE) +
scale_colour_brewer(palette = "Set1")
print(p1)
p2 <- plot_landscape(microbiome::transform(phy , "compositional"),
distance = distance,
method = method,
size = 3,
col = "age_group",
shading = FALSE) +
scale_colour_brewer(palette = "Set1")
print(p2)
res <- adonis(t(otu_table(phy)) ~ Diet + Geographical_location + age_group,
data = meta(phy),
permutations=99,
method = distance)
print(res)
library(microbiome)
library(DirichletMultinomial)
BiocManager::install("DirichletMultinomial")
library(DirichletMultinomial)
library(reshape2)
library(magrittr)
library(dplyr)
data(phy <- readRDS("data/processed/phyloseq/phy20.1.RDS"))
phy <- readRDS("data/processed/phyloseq/phy20.1.RDS")
Data(phy)
data(phy)
pseq <- phy
pseq.comp <- microbiome::transform(pseq, "compositional")
taxa <- core_members(pseq.comp, detection = 0.1/100, prevalence = 50/100)
pseq <- prune_taxa(taxa, pseq)
dat <- abundances(pseq)
count <- as.matrix(t(dat))
fit <- lapply(1:3, dmn, count = count, verbose=TRUE)
lplc <- sapply(fit, laplace)
aic  <- sapply(fit, AIC)
bic  <- sapply(fit, BIC)
best <- fit[[which.min(unlist(lplc))]]
mixturewt(best)
ass <- apply(mixture(best), 1, which.max)
for (k in seq(ncol(fitted(best)))) {
d <- melt(fitted(best))
colnames(d) <- c("OTU", "cluster", "value")
d <- subset(d, cluster == k) %>%
# Arrange OTUs by assignment strength
arrange(value) %>%
mutate(OTU = factor(OTU, levels = unique(OTU))) %>%
# Only show the most important drivers
filter(abs(value) > quantile(abs(value), 0.8))
p <- ggplot(d, aes(x = OTU, y = value)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = paste("Top drivers: community type", k))
print(p)
}
for (k in seq(ncol(fitted(best)))) {
d <- melt(fitted(best))
colnames(d) <- c("OTU", "cluster", "value")
d <- subset(d, cluster == k) %>%
# Arrange OTUs by assignment strength
arrange(value) %>%
mutate(OTU = factor(OTU, levels = unique(OTU))) %>%
# Only show the most important drivers
filter(abs(value) > quantile(abs(value), 0.8))
p <- ggplot(d, aes(x = OTU, y = value)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = paste("Top drivers: community type", k))
print(p)
}
d <- melt(fitted(best))
colnames(d) <- c("OTU", "cluster", "value")
d <- subset(d, cluster == k) %>%
# Arrange OTUs by assignment strength
arrange(value) %>%
mutate(OTU = factor(OTU, levels = unique(OTU))) %>%
# Only show the most important drivers
filter(abs(value) > quantile(abs(value), 0.8))
p <- ggplot(d, aes(x = OTU, y = value)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = paste("Top drivers: community type", k))
print(p)
library(microbiome)
library(DirichletMultinomial)
library(reshape2)
library(magrittr)
library(dplyr)
phy <- readRDS("data/processed/phyloseq/phy20.1.RDS")
data(phy)
pseq <- phy
pseq.comp <- microbiome::transform(pseq, "compositional")
taxa <- core_members(pseq.comp, detection = 0.1/100, prevalence = 50/100)
pseq <- prune_taxa(taxa, pseq)
dat <- abundances(pseq)
count <- as.matrix(t(dat))
fit <- lapply(1:3, dmn, count = count, verbose=TRUE)
lplc <- sapply(fit, laplace)
aic  <- sapply(fit, AIC)
bic  <- sapply(fit, BIC)
best <- fit[[which.min(unlist(lplc))]]
mixturewt(best)
ass <- apply(mixture(best), 1, which.max)
for (k in seq(ncol(fitted(best)))) {
d <- melt(fitted(best))
colnames(d) <- c("OTU", "cluster", "value")
d <- subset(d, cluster == k) %>%
# Arrange OTUs by assignment strength
arrange(value) %>%
mutate(OTU = factor(OTU, levels = unique(OTU))) %>%
# Only show the most important drivers
filter(abs(value) > quantile(abs(value), 0.8))
p <- ggplot(d, aes(x = OTU, y = value)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = paste("Top drivers: community type", k))
print(p)
}
library(microbiome)
BiocManager::install("DirichletMultinomial")
library(microbiome)
library(DirichletMultinomial)
library(reshape2)
library(magrittr)
library(dplyr)
phy <- readRDS("data/processed/phyloseq/phy20.1.RDS")
data(phy)
pseq <- phy
pseq.comp <- microbiome::transform(pseq, "compositional")
taxa <- core_members(pseq.comp, detection = 0.1/100, prevalence = 50/100)
pseq <- prune_taxa(taxa, pseq)
dat <- abundances(pseq)
count <- as.matrix(t(dat))
fit <- lapply(1:3, dmn, count = count, verbose=TRUE)
lplc <- sapply(fit, laplace)
aic  <- sapply(fit, AIC)
bic  <- sapply(fit, BIC)
best <- fit[[which.min(unlist(lplc))]]
mixturewt(best)
ass <- apply(mixture(best), 1, which.max)
for (k in seq(ncol(fitted(best)))) {
d <- melt(fitted(best))
colnames(d) <- c("OTU", "cluster", "value")
d <- subset(d, cluster == k) %>%
# Arrange OTUs by assignment strength
arrange(value) %>%
mutate(OTU = factor(OTU, levels = unique(OTU))) %>%
# Only show the most important drivers
filter(abs(value) > quantile(abs(value), 0.8))
p <- ggplot(d, aes(x = OTU, y = value)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = paste("Top drivers: community type", k))
print(p)
}
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(phyloseq)
library(dada2)
library(readxl)
library(dplyr)
library(knitr)
library(knitcitations)
library(microbiome)
library(phyloseq)
library(ggplot2)
library(reshape2)
library(tidyverse)
library(dada2)
library(dplyr)
theme_set(theme_bw(20))
knitr::opts_chunk$set(fig.width=10, fig.height=10, message=FALSE, warning=FALSE)
knitr::opts_chunk$set(fig.path="figure_age/")
# Was created with: source("create_phyloseq.R")
phy<- readRDS("data/processed/phyloseq/phy20.1.RDS")
# Exclude middle-aged group
Q <- subset_samples(phy, !age_group %in% "middle_age")
# Old code
# Remove <- c("I1", "I2", "I6", "I9", "I10", "I11", "I16", "I19", "I22", "I25", "I27","I28", "I29", "I31","I34", "I40")
#subset_samples(phy20.1, Sample %in% Remove)
# Q <- subset_samples(phy, !(Sample %in% Remove))
library(microbiome)
opts_chunk$set(dev="CairoPNG")
# Estimate alpha diversities
A <- alpha(Q)
index <- "diversity_shannon"
library(Cairo)
df <- meta(Q)
df <- bind_cols(df, A)
df$index <- df[[index]]
pv <- wilcox.test(data = df, index ~ factor(age_group))$p.value
library(ggbeeswarm)
p1 <- ggplot(df, aes(x = age_group, y = index, fill = age_group)) +
ggbeeswarm::geom_beeswarm() +
theme(axis.text.x = element_text(angle = 0, hjust = 1)) +
labs(y = "Shannon Diversity",
x = "",
title = paste0("wilcoxon tast p=", round(pv, 2)))
print(p1)
library(microbiome)
library(phyloseq)
library(vegan)
opts_chunk$set(dev="CairoPNG")
method <- "PCoA"
trans <- "compositional"
distance <- "jaccard"
library(microbiome)
library(DirichletMultinomial)
library(reshape2)
library(magrittr)
library(dplyr)
phy <- readRDS("data/processed/phyloseq/phy20.1.RDS")
data(phy)
pseq <- phy
pseq.comp <- microbiome::transform(pseq, "compositional")
taxa <- core_members(pseq.comp, detection = 0.1/100, prevalence = 50/100)
pseq <- prune_taxa(taxa, pseq)
dat <- abundances(pseq)
count <- as.matrix(t(dat))
fit <- lapply(1:3, dmn, count = count, verbose=TRUE)
lplc <- sapply(fit, laplace)
aic  <- sapply(fit, AIC)
bic  <- sapply(fit, BIC)
best <- fit[[which.min(unlist(lplc))]]
mixturewt(best)
ass <- apply(mixture(best), 1, which.max)
for (k in seq(ncol(fitted(best)))) {
d <- melt(fitted(best))
colnames(d) <- c("OTU", "cluster", "value")
d <- subset(d, cluster == k) %>%
# Arrange OTUs by assignment strength
arrange(value) %>%
mutate(OTU = factor(OTU, levels = unique(OTU))) %>%
# Only show the most important drivers
filter(abs(value) > quantile(abs(value), 0.8))
p <- ggplot(d, aes(x = OTU, y = value)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = paste("Top drivers: community type", k))
print(p)
}
library(microbiome)
library(DirichletMultinomial)
library(reshape2)
library(magrittr)
library(dplyr)
phy <- readRDS("data/processed/phyloseq/phy20.1.RDS")
data(phy)
pseq <- phy
pseq.comp <- microbiome::transform(pseq, "compositional")
taxa <- core_members(pseq.comp, detection = 0.1/100, prevalence = 50/100)
pseq <- prune_taxa(taxa, pseq)
dat <- abundances(pseq)
count <- as.matrix(t(dat))
fit <- lapply(1:3, dmn, count = count, verbose=TRUE)
lplc <- sapply(fit, laplace)
aic  <- sapply(fit, AIC)
bic  <- sapply(fit, BIC)
best <- fit[[which.min(unlist(lplc))]]
mixturewt(best)
ass <- apply(mixture(best), 1, which.max)
for (k in seq(ncol(fitted(best)))) {
d <- melt(fitted(best))
colnames(d) <- c("OTU", "cluster", "value")
d <- subset(d, cluster == k) %>%
# Arrange OTUs by assignment strength
arrange(value) %>%
mutate(OTU = factor(OTU, levels = unique(OTU))) %>%
# Only show the most important drivers
filter(abs(value) > quantile(abs(value), 0.8))
p <- ggplot(d, aes(x = OTU, y = value)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = paste("Top drivers: community type", k))
print(p)
}
library(microbiome)
library(DirichletMultinomial)
library(reshape2)
library(magrittr)
library(dplyr)
phy <- readRDS("data/processed/phyloseq/phy20.1.RDS")
data(phy)
pseq <- phy
pseq.comp <- microbiome::transform(pseq, "compositional")
taxa <- core_members(pseq.comp, detection = 0.1/100, prevalence = 50/100)
pseq <- prune_taxa(taxa, pseq)
dat <- abundances(pseq)
count <- as.matrix(t(dat))
fit <- lapply(1:3, dmn, count = count, verbose=TRUE)
lplc <- sapply(fit, laplace)
aic  <- sapply(fit, AIC)
bic  <- sapply(fit, BIC)
best <- fit[[which.min(unlist(lplc))]]
mixturewt(best)
ass <- apply(mixture(best), 1, which.max)
for (k in seq(ncol(fitted(best)))) {
d <- melt(fitted(best))
colnames(d) <- c("OTU", "cluster", "value")
d <- subset(d, cluster == k) %>%
# Arrange OTUs by assignment strength
arrange(value) %>%
mutate(OTU = factor(OTU, levels = unique(OTU))) %>%
# Only show the most important drivers
filter(abs(value) > quantile(abs(value), 0.8))
p <- ggplot(d, aes(x = OTU, y = value)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = paste("Top drivers: community type", k))
print(p)
}
knitr::knit("DirichletMultinominalanalysis.Rmd")
library(knitr)
library(knitcitations)
library(microbiome)
library(phyloseq)
library(ggplot2)
library(reshape2)
library(tidyverse)
library(dada2)
library(dplyr)
theme_set(theme_bw(20))
knitr::opts_chunk$set(fig.width=10, fig.height=10, message=FALSE, warning=FALSE)
# Was created with: source("create_phyloseq.R")
phy <- readRDS("data/processed/phyloseq/phy20.1.RDS")
library(knitr)
library(knitcitations)
library(microbiome)
library(phyloseq)
library(ggplot2)
library(reshape2)
library(tidyverse)
library(dada2)
library(dplyr)
library(microbiome)
library(microbiome)
library(phyloseq)
library(vegan)
theme_set(theme_bw(20))
knitr::opts_chunk$set(fig.width=10, fig.height=10, message=FALSE, warning=FALSE)
knitr::opts_chunk$set(fig.path="figure_location/")
opts_chunk$set(dev="CairoPNG")
# Was created with: source("create_phyloseq.R")
phy <- readRDS("data/processed/phyloseq/phy20.1.RDS")
method <- "PCoA"
trans <- "compositional"
distance <- "bray"
index <- "diversity_shannon"
# Estimate alpha diversities
A <- alpha(phy)
library(Cairo)
df <- meta(phy)
df <- bind_cols(df, A)
df$index <- df[[index]]
pv <- kruskal.test(data = df, index ~ factor(Geographical_location))$p.value
library(ggbeeswarm)
p1 <- ggplot(df, aes(x = Geographical_location, y = index, fill = Geographical_location)) +
ggbeeswarm::geom_beeswarm() +
theme(axis.text.x = element_text(angle = 0, hjust = 1)) +
labs(y = "Shannon Diversity",
x = "",
title = paste0("Kruskal test p=", round(pv, 2)))
print(p1)
location <- meta(phy)$Geographical_location
A <- abundances(phy);
pv <- apply(A, 1, function (x) {kruskal.test(x ~ location)$p.value});
padj <- p.adjust(pv);
df <- data.frame(taxon = names(padj), padj = padj)
# Add full names for the taxa
full.names <- apply(tax_table(phy), 1, function (x) {paste(x, collapse = "_")})
df$full_name <- full.names[df$taxon]
df <- df %>% filter(padj < 0.25) %>% arrange(padj)
rownames(df) <- NULL
library(knitr)
kable(df)
ps <- microbiome::transform(phy, "clr")
d <- meta(ps)
for (tax in df$taxon) {
d$taxa <- abundances(ps)[tax, ]
p <- ggplot(d, aes(x = Geographical_location, y = taxa)) +
geom_boxplot() +
ggbeeswarm::geom_beeswarm() +
theme(axis.text.x = element_text(angle = 360, hjust = 1)) +
labs(x = "Location", y = "Abundance (CLR)", title = tax)
print(p)
}
library(knitr)
library(knitcitations)
library(microbiome)
library(phyloseq)
library(ggplot2)
library(reshape2)
library(tidyverse)
library(dada2)
library(dplyr)
library(microbiome)
library(microbiome)
library(phyloseq)
library(vegan)
theme_set(theme_bw(20))
knitr::opts_chunk$set(fig.width=10, fig.height=10, message=FALSE, warning=FALSE)
knitr::opts_chunk$set(fig.path="figure_location/")
opts_chunk$set(dev="CairoPNG")
# Was created with: source("create_phyloseq.R")
phy <- readRDS("data/processed/phyloseq/phy20.1.RDS")
method <- "PCoA"
trans <- "compositional"
distance <- "bray"
index <- "diversity_shannon"
# Estimate alpha diversities
A <- alpha(phy)
library(Cairo)
df <- meta(phy)
df <- bind_cols(df, A)
df$index <- df[[index]]
pv <- kruskal.test(data = df, index ~ factor(Geographical_location))$p.value
library(ggbeeswarm)
p1 <- ggplot(df, aes(x = Geographical_location, y = index, fill = Geographical_location)) +
ggbeeswarm::geom_beeswarm() +
theme(axis.text.x = element_text(angle = 0, hjust = 1)) +
labs(y = "Shannon Diversity",
x = "",
title = paste0("Kruskal test p=", round(pv, 2)))
print(p1)
location <- meta(phy)$Geographical_location
A <- abundances(phy);
pv <- apply(A, 1, function (x) {kruskal.test(x ~ location)$p.value});
padj <- p.adjust(pv);
df <- data.frame(taxon = names(padj), padj = padj)
# Add full names for the taxa
full.names <- apply(tax_table(phy), 1, function (x) {paste(x, collapse = "_")})
df$full_name <- full.names[df$taxon]
df <- df %>% filter(padj < 0.25) %>% arrange(padj)
rownames(df) <- NULL
library(knitr)
kable(df)
ps <- microbiome::transform(phy, "clr")
d <- meta(ps)
for (tax in df$taxon) {
d$taxa <- abundances(ps)[tax, ]
p <- ggplot(d, aes(x = Geographical_location, y = taxa)) +
geom_boxplot() +
ggbeeswarm::geom_beeswarm() +
theme(axis.text.x = element_text(angle = 360, hjust = 1)) +
labs(x = "Location", y = "Abundance (CLR)", title = tax)
print(p)
}
library(microbiome)
library(DirichletMultinomial)
library(reshape2)
library(magrittr)
library(dplyr)
library(knitr)
phy <- readRDS("data/processed/phyloseq/phy20.1.RDS")
# data(phy) -> this was to load other example data; not needed as you just loaded phy above
pseq <- phy
# Include only those groups that exceed certain abundance and prevalenec
set.seed(455423)
pseq.comp <- microbiome::transform(pseq, "compositional")
theme_set(theme_bw(20))
knitr::opts_chunk$set(fig.width=10, fig.height=10, message=FALSE, warning=FALSE)
opts_chunk$set(dev="CairoPNG")
# Set this to make sure that the figures of this Rmd file get their own name
knitr::opts_chunk$set(fig.path="figure_DMM/")
det.th <- 0/100
prev.th <- 10/100
taxa <- core_members(pseq.comp, detection = det.th, prevalence = prev.th)
pseq <- prune_taxa(taxa, pseq)
dat <- abundances(pseq)
count <- as.matrix(t(dat))
# Define here the max (possible) number of clusters. The higher it is, the slower the computing.
max.clusters <- 5
quiet(fit <- lapply(1:max.clusters, dmn, count = count, verbose=TRUE))
lplc <- sapply(fit, laplace)
aic  <- sapply(fit, AIC)
bic  <- sapply(fit, BIC)
best <- fit[[which.min(unlist(lplc))]]
# mixturewt(best)
ass <- apply(mixture(best), 1, which.max)
full.names <- apply(tax_table(phy), 1, function (x) {paste(x, collapse = "_")})
for (k in seq(ncol(fitted(best)))) {
d <- melt(fitted(best))
colnames(d) <- c("OTU", "cluster", "value")
# Add full names
d$full_name <- gsub("Bacteria_", "", full.names[d$OTU])
d <- subset(d, cluster == k) %>%
# Arrange OTUs by assignment strength
arrange(value) %>%
mutate(OTU = factor(OTU, levels = unique(OTU))) %>%
# Only show the most important drivers
filter(abs(value) > quantile(abs(value), 0.8))
p <- ggplot(d, aes(x = full_name, y = value)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = paste("Top drivers: community type", k))
print(p)
}
#theme_set(theme_bw(15))
method <- "PCoA"
trans <- "compositional"
distance <- "bray"
sample_data(phy)$community_type <- factor(ass[rownames(sample_data(phy))])
p <- plot_landscape(microbiome::transform(phy , "compositional"),
distance = distance,
method = method,
size = 3,
col = "community_type",
shading = FALSE) +
scale_colour_brewer(palette = "Set1")
print(p)
knitr::knit("DirichletMultinominalanalysis.Rmd")
