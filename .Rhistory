#median = round(100 * median(value), 1),
#min = round(100 * min(value), 1),
#max = round(100 * max(value), 1),
prevalence = round(100 * prevalence(value), 1))%>%
arrange(desc(mean))
#kable(dfm)
#write.csv(dfm, file="genus table.csv")
library(data.table)
a <- data.table:::print.data.table(dfm, nrows = 20, topn=20)
library(knitr)
library(knitcitations)
library(microbiome)
library(phyloseq)
library(ggplot2)
library(reshape2)
library(tidyverse)
library(dada2)
library(dplyr)
library(microbiome)
library(microbiome)
library(phyloseq)
library(vegan)
library(ggpubr)
theme_set(theme_bw(20))
knitr::opts_chunk$set(fig.width=10, fig.height=10, message=FALSE, warning=FALSE)
knitr::opts_chunk$set(fig.path="figure_location/")
opts_chunk$set(dev="CairoPNG")
# Was created with: source("create_phyloseq.R")
phy <- readRDS("data/processed/phyloseq/phy20.1.RDS")
method <- "PCoA"
trans <- "compositional"
distance <- "bray"
index <- "diversity_shannon"
# Estimate alpha diversities
A <- alpha(phy)
b <- meta(phy)
b2 <- bind_cols(b,A)
is.data.frame(b)
is.data.frame(b2)
z<- sapply(split(b2$diversity_shannon, b2$Geographical_location), mean)
f <- sapply(split(b2$diversity_shannon, b2$Geographical_location), sd)
v <- cbind(z,f)
kable(v)
theme_set(theme_bw(base_size=25))
library(Cairo)
df <- meta(phy)
df <- bind_cols(df, A)
df$index <- df[[index]]
pv <- kruskal.test(data = df, index ~ factor(Geographical_location))$p.value
kruskal.test(data = df, index ~factor(Geographical_location))
library(ggbeeswarm)
library(ggsignif)
jpeg(file= "figure_location.jpeg", quality = 100)
p1 <- ggplot(df, aes(x = Geographical_location, y = index)) +
geom_boxplot(color = "black") +
geom_jitter(width = 0.1) +
theme(axis.text.x = element_text(angle = 0, hjust = 0.5)) + theme(legend.position = "none")+
labs(y = "Shannon Diversity",
x = "",
title = "Geographical location")
#geom_signif(comparisons = list(c("Ahmednagar", "Nashik", "Pune")),map_signif_level = TRUE)
print(p1)
theme_set(theme_bw(base_size=25))
library(Cairo)
df <- meta(phy)
df <- bind_cols(df, A)
df$index <- df[[index]]
pv <- kruskal.test(data = df, index ~ factor(Geographical_location))$p.value
kruskal.test(data = df, index ~factor(Geographical_location))
library(ggbeeswarm)
library(ggsignif)
jpeg(file= "figure_location.jpeg", quality = 100)
p1 <- ggplot(df, aes(x = Geographical_location, y = index)) +
geom_boxplot(color = "black") +
geom_jitter(width = 0.1) +
theme(axis.text.x = element_text(angle = 0, hjust = 0.5)) + theme(legend.position = "none")+
labs(y = "Shannon Diversity",
x = "",
title = "Geographical location")
print(p1)
theme_set(theme_bw(base_size=25))
library(Cairo)
df <- meta(phy)
df <- bind_cols(df, A)
df$index <- df[[index]]
pv <- kruskal.test(data = df, index ~ factor(Geographical_location))$p.value
#kruskal.test(data = df, index ~factor(Geographical_location))
library(ggbeeswarm)
library(ggsignif)
jpeg(file= "figure_location.jpeg", quality = 100)
p1 <- ggplot(df, aes(x = Geographical_location, y = index)) +
geom_boxplot(color = "black") +
geom_jitter(width = 0.1) +
theme(axis.text.x = element_text(angle = 0, hjust = 0.5)) + theme(legend.position = "none")+
labs(y = "Shannon Diversity",
x = "",
title = "Geographical location")
print(p1)
print(p1)
knitr::opts_chunk$set(fig.width=15, fig.height=10, message=FALSE, warning=FALSE)
theme_set(theme_bw(base_size=25))
transform <- microbiome::transform
j <- transform(phy, "compositional")
sp <- aggregate_taxa(j, "phylum")
#today md <-  psmelt(sp)
#today op <- aggregate_rare(md, level = 'genus',detection = 0.1/100, prevalence = 20/100, include.lowest =TRUE)
#tax_table(sp$other) <- aggregate_rare(sp, level = 'genus',detection = 0.1/100, prevalence = 20/100, include.lowest =FALSE)
o <- aggregate_rare(sp, level = 'phylum',detection = 0.1/100, prevalence = 20/100, include.lowest =TRUE)
phyla.ordering <- names(sort(rowMeans(abundances(transform(o, "compositional")))))
df <- psmelt(o)
df$Phylum <- factor(df$phylum, levels=phyla.ordering)
sorted.samples.by.Firmicutes <- unlist(subset(df, Phylum=="Firmicutes") %>% arrange(Abundance) %>% select(Sample))
df$Sample <- factor(df$Sample, levels = sorted.samples.by.Firmicutes)
w <- df %>% filter (Geographical_location=="Ahmednagar")
f <- ggplot(w, aes(x = Sample, fill = Phylum, y = Abundance)) + geom_bar(stat = "identity", colour = "black") +
labs(y =  "Relative abundance (%)", x = "") + scale_y_continuous(label=scales::percent) + scale_fill_brewer("Phylum", palette = "Set3") + facet_grid(Geographical_location ~ .) + facet_grid(cols = vars(Geographical_location)) + theme(axis.text.x = element_blank(),legend.position = "none")
#print(f)
l <- df %>% filter (Geographical_location=="Pune")
m <- ggplot(l, aes(x = Sample, fill = Phylum, y = Abundance)) + geom_bar(stat = "identity", colour = "black") +
labs(y =  "", x = "") + scale_y_continuous(label=scales::percent)  + scale_fill_brewer("Phylum", palette = "Set3") + facet_grid(Geographical_location ~ .) +  facet_grid(cols = vars(Geographical_location)) + theme(axis.text.x = element_blank(), legend.position = "none")
#print(m)
n <- df %>% filter (Geographical_location=="Nashik")
u <- ggplot(n, aes(x = Sample, fill = Phylum, y = Abundance)) + geom_bar(stat = "identity", colour = "black") +
labs(y =  "", x = "") + scale_y_continuous(label=scales::percent) + scale_fill_brewer("Phyla", palette = "Set3") + facet_grid(Geographical_location ~ .) + facet_grid(cols = vars(Geographical_location)) + theme(axis.text.x = element_blank())
#print(u)
library("gridExtra")
grid.arrange(f, m, u , nrow = 1)
theme_set(theme_bw(base_size=25))
library(readr)
library(tidyverse)
otu_data <- abundances(phy)
meta_data <- meta(phy)
# To get this, clone
# https://github.com/FrederickHuangLin/ANCOM.git
library(compositions)
source("ANCOM/scripts/ancom_v2.1.R")
# Step 1: Data preprocessing
feature_table = otu_data;
sample_var = "Sample";
group_var = NULL
out_cut = 0.05;
zero_cut = 0.90;
lib_cut = 1000;
neg_lb = FALSE
prepro = feature_table_pre_process(feature_table,
meta_data,
sample_var,
group_var,
out_cut,
zero_cut,
lib_cut,
neg_lb)
feature_table = prepro$feature_table # Preprocessed feature table
meta_data = prepro$meta_data # Preprocessed metadata
struc_zero = prepro$structure_zeros # Structural zero info
# Step 2: ANCOM
main_var <- "Geographical_location";
p_adj_method <- "BH";
alpha <- 0.05
adj_formula <- NULL;
rand_formula <- NULL
res <- ANCOM(feature_table, meta_data, struc_zero,
main_var, p_adj_method,
alpha, adj_formula, rand_formula)
#write_csv(res$out, "ancom.csv")
res.sorted <- res$out %>% arrange(desc(W))
top.taxa <- res.sorted[which(res.sorted[,3]), "taxa_id"]
head(res.sorted)
ps <- microbiome::transform(phy, "compositional")
d <- meta(ps)
library(beeswarm)
for (tax in top.taxa) {
d$taxa <- abundances(ps)[tax, ]
# Add small pseudocount to enable visualization
d$taxa <- d$taxa + min(abundances(ps)[abundances(ps)>0])/2
# d$gen <- taxa(ps)["genus", ]
p <- ggplot(d, aes(x = Geographical_location, y = taxa)) +
geom_boxplot() +
ggbeeswarm::geom_beeswarm() +
scale_y_continuous() +
#scale_y_continuous(limits = c(0.005,0.005, 0.01,0.1, 0.5, 1.0)) +
theme(axis.text.x = element_text(angle = 360, hjust = 0.5)) +
#labs(x = "Location", y = "Abundance (CLR)", title = map_levels(tax, from='tax', to='genus',ps))
labs(x = "Location", y = "Abundance (%)", title = as.vector(tax_table(ps)[tax, "genus"]))
print(p)
}
library(FSA)
ps <- microbiome::transform(phy, "compositional")
# CLR transform
#o <- microbiome::transform(phy, "clr")
d <- meta(ps)
#p_adj_method <- "fdr"
dunn.results <- list()
for (tax in top.taxa) {
d$taxa <- abundances(ps)[tax, ]
# Add small pseudocount to enable visualization
d$taxa <- d$taxa + min(abundances(ps)[abundances(ps)>0])/2
re <- dunnTest(taxa ~ Geographical_location,data=d)
dunn.results[[tax]] <- re
##d1 <- data.frame(d)
##re <- dunnTest(d1$taxa ~ d1$Geographical_location,data=d1)
##print(re)
}
print(dunn.results)
theme_set(theme_bw(base_size=25))
library(readr)
library(tidyverse)
otu_data <- abundances(phy)
meta_data <- meta(phy)
# To get this, clone
# https://github.com/FrederickHuangLin/ANCOM.git
library(compositions)
source("ANCOM/scripts/ancom_v2.1.R")
# Step 1: Data preprocessing
feature_table = otu_data;
sample_var = "Sample";
group_var = NULL
out_cut = 0.05;
zero_cut = 0.90;
lib_cut = 1000;
neg_lb = FALSE
prepro = feature_table_pre_process(feature_table,
meta_data,
sample_var,
group_var,
out_cut,
zero_cut,
lib_cut,
neg_lb)
feature_table = prepro$feature_table # Preprocessed feature table
meta_data = prepro$meta_data # Preprocessed metadata
struc_zero = prepro$structure_zeros # Structural zero info
# Step 2: ANCOM
main_var <- "Geographical_location";
p_adj_method <- "BH";
alpha <- 0.05
adj_formula <- NULL;
rand_formula <- NULL
res <- ANCOM(feature_table, meta_data, struc_zero,
main_var, p_adj_method,
alpha, adj_formula, rand_formula)
#write_csv(res$out, "ancom.csv")
res.sorted <- res$out %>% arrange(desc(W))
top.taxa <- res.sorted[which(res.sorted[,3]), "taxa_id"]
head(res.sorted)
ps <- microbiome::transform(phy, "compositional")
d <- meta(ps)
library(FSA)
p.adj.method <- "bh"
dunn.results <- list()
figures <- list()
library(beeswarm)
for (tax in top.taxa) {
d$taxa <- abundances(ps)[tax, ]
re <- dunnTest(taxa ~ Geographical_location,data=d, method = p.adj.method, list= TRUE) #Pairwise comparisons using Dunn test
dunn.results[[tax]] <- re
#print(dunn.results)
stat.test <- re$res
stat.test$group1 <- stringr::word(re$res$Comparison, 1)
stat.test$group2 <- stringr::word(re$res$Comparison, 3)
head(stat.test)
##@##stat.test <- stat.test %>% mutate(y.position = c(0.04, 0.025, 0.035))
stat.test <- stat.test %>% mutate(y.position = c(0.025, 0.015, 0.02))
#@#if (tax == "Corynebacterium") {
#@# stat.test <- stat.test %>% mutate(y.position = c(0.65, 0.6, 0.58))
#}
#@#else {
#@#  stat.test <- stat.test %>% mutate(y.position = c(0.04, 0.025, 0.035))
#@# }
stat.test$P.adj.signif <-cut(stat.test$P.adj, breaks=c(0, 0.001, 0.01, 0.05, 1), labels=c("***", "**","*","ns"))
# Add small pseudocount to enable visualization
d$taxa <- d$taxa + min(abundances(ps)[abundances(ps)>0])/2
p <- ggboxplot(d, x = "Geographical_location", y = "taxa", xlab = FALSE,  ylab = "Abundance (%)", font.y = c(18,"bold"), font.xtickslab = 18, font.ytickslab = 18, linetype = "solid",size = 0.5, title =as.vector(tax_table(ps)[tax, "genus"]), font.main = c(22,"bold.italic")) + stat_pvalue_manual(stat.test, label = "P.adj.signif", hide.ns=TRUE)
figures[[tax]] <- p
print(p)
}
#p1 <- figures[[1]]
#stat.test <- stat.test %>% mutate(y.position = c(0.085, 0.025, 0.083))
#p1 <- ggboxplot(d, x = "Geographical_location", y = "taxa", xlab = FALSE,  ylab = "Abundance(%)", font.y = c(18,"bold"), font.xtickslab = 18, font.ytickslab = 18, linetype = "solid",size = 0.5, title =as.vector(tax_table(ps)[tax, "genus"]), font.main = c(22,"bold.italic")) + stat_pvalue_manual(stat.test, label = "P.adj.signif", hide.ns=TRUE)
#print(p1)
#stat.test$P.adj.signif <- stat.test$P.adj(c("<=0.1", "<=0.01", "<=0.001", "<=0.001"), lable =c("NS", "*", "**", "***"))
theme_set(theme_bw(base_size=25))
library(readr)
library(tidyverse)
otu_data <- abundances(phy)
meta_data <- meta(phy)
# To get this, clone
# https://github.com/FrederickHuangLin/ANCOM.git
library(compositions)
source("ANCOM/scripts/ancom_v2.1.R")
# Step 1: Data preprocessing
feature_table = otu_data;
sample_var = "Sample";
group_var = NULL
out_cut = 0.05;
zero_cut = 0.90;
lib_cut = 1000;
neg_lb = FALSE
prepro = feature_table_pre_process(feature_table,
meta_data,
sample_var,
group_var,
out_cut,
zero_cut,
lib_cut,
neg_lb)
feature_table = prepro$feature_table # Preprocessed feature table
meta_data = prepro$meta_data # Preprocessed metadata
struc_zero = prepro$structure_zeros # Structural zero info
# Step 2: ANCOM
main_var <- "Geographical_location";
p_adj_method <- "BH";
alpha <- 0.05
adj_formula <- NULL;
rand_formula <- NULL
res <- ANCOM(feature_table, meta_data, struc_zero,
main_var, p_adj_method,
alpha, adj_formula, rand_formula)
#write_csv(res$out, "ancom.csv")
res.sorted <- res$out %>% arrange(desc(W))
top.taxa <- res.sorted[which(res.sorted[,3]), "taxa_id"]
head(res.sorted)
ps <- microbiome::transform(phy, "compositional")
d <- meta(ps)
library(FSA)
p.adj.method <- "bh"
dunn.results <- list()
figures <- list()
library(beeswarm)
for (tax in top.taxa) {
d$taxa <- abundances(ps)[tax, ]
re <- dunnTest(taxa ~ Geographical_location,data=d, method = p.adj.method, list= TRUE) #Pairwise comparisons using Dunn test
dunn.results[[tax]] <- re
#print(dunn.results)
stat.test <- re$res
stat.test$group1 <- stringr::word(re$res$Comparison, 1)
stat.test$group2 <- stringr::word(re$res$Comparison, 3)
head(stat.test)
##@##stat.test <- stat.test %>% mutate(y.position = c(0.04, 0.025, 0.035))
stat.test <- stat.test %>% mutate(y.position = c(0.025, 0.015, 0.02))
#@#if (tax == "Corynebacterium") {
#@# stat.test <- stat.test %>% mutate(y.position = c(0.65, 0.6, 0.58))
#}
#@#else {
#@#  stat.test <- stat.test %>% mutate(y.position = c(0.04, 0.025, 0.035))
#@# }
stat.test$P.adj.signif <-cut(stat.test$P.adj, breaks=c(0, 0.001, 0.01, 0.05, 1), labels=c("***", "**","*","ns"))
# Add small pseudocount to enable visualization
d$taxa <- d$taxa + min(abundances(ps)[abundances(ps)>0])/2
p <- ggboxplot(d, x = "Geographical_location", y = "taxa", xlab = FALSE,  ylab = "Abundance (%)", font.y = c(18,"bold"), font.xtickslab = 18, font.ytickslab = 18, linetype = "solid",size = 0.5, title =as.vector(tax_table(ps)[tax, "genus"]), font.main = c(22,"bold.italic")) + stat_pvalue_manual(stat.test, label = "P.adj.signif", hide.ns=TRUE)
figures[[tax]] <- p
print(p)
}
#p1 <- figures[[1]]
#stat.test <- stat.test %>% mutate(y.position = c(0.085, 0.025, 0.083))
#p1 <- ggboxplot(d, x = "Geographical_location", y = "taxa", xlab = FALSE,  ylab = "Abundance(%)", font.y = c(18,"bold"), font.xtickslab = 18, font.ytickslab = 18, linetype = "solid",size = 0.5, title =as.vector(tax_table(ps)[tax, "genus"]), font.main = c(22,"bold.italic")) + stat_pvalue_manual(stat.test, label = "P.adj.signif", hide.ns=TRUE)
#print(p1)
#stat.test$P.adj.signif <- stat.test$P.adj(c("<=0.1", "<=0.01", "<=0.001", "<=0.001"), lable =c("NS", "*", "**", "***"))
theme_set(theme_bw(base_size=25))
library(readr)
library(tidyverse)
otu_data <- abundances(phy)
meta_data <- meta(phy)
# To get this, clone
# https://github.com/FrederickHuangLin/ANCOM.git
library(compositions)
source("ANCOM/scripts/ancom_v2.1.R")
# Step 1: Data preprocessing
feature_table = otu_data;
sample_var = "Sample";
group_var = NULL
out_cut = 0.05;
zero_cut = 0.90;
lib_cut = 1000;
neg_lb = FALSE
prepro = feature_table_pre_process(feature_table,
meta_data,
sample_var,
group_var,
out_cut,
zero_cut,
lib_cut,
neg_lb)
feature_table = prepro$feature_table # Preprocessed feature table
meta_data = prepro$meta_data # Preprocessed metadata
struc_zero = prepro$structure_zeros # Structural zero info
# Step 2: ANCOM
main_var <- "Geographical_location";
p_adj_method <- "BH";
alpha <- 0.05
adj_formula <- NULL;
rand_formula <- NULL
res <- ANCOM(feature_table, meta_data, struc_zero,
main_var, p_adj_method,
alpha, adj_formula, rand_formula)
#write_csv(res$out, "ancom.csv")
res.sorted <- res$out %>% arrange(desc(W))
top.taxa <- res.sorted[which(res.sorted[,3]), "taxa_id"]
head(res.sorted)
ps <- microbiome::transform(phy, "compositional")
d <- meta(ps)
library(FSA)
p.adj.method <- "bh"
dunn.results <- list()
figures <- list()
library(beeswarm)
for (tax in top.taxa) {
d$taxa <- abundances(ps)[tax, ]
re <- dunnTest(taxa ~ Geographical_location,data=d, method = p.adj.method, list= TRUE) #Pairwise comparisons using Dunn test
dunn.results[[tax]] <- re
#print(dunn.results)
stat.test <- re$res
stat.test$group1 <- stringr::word(re$res$Comparison, 1)
stat.test$group2 <- stringr::word(re$res$Comparison, 3)
head(stat.test)
stat.test <- stat.test %>% mutate(y.position = c(0.025, 0.015, 0.02))
stat.test$P.adj.signif <-cut(stat.test$P.adj, breaks=c(0, 0.001, 0.01, 0.05, 1), labels=c("***", "**","*","ns"))
# Add small pseudocount to enable visualization
d$taxa <- d$taxa + min(abundances(ps)[abundances(ps)>0])/2
p <- ggboxplot(d, x = "Geographical_location", y = "taxa", xlab = FALSE,  ylab = "Abundance (%)", font.y = c(18,"bold"), font.xtickslab = 18, font.ytickslab = 18, linetype = "solid",size = 0.5, title =as.vector(tax_table(ps)[tax, "genus"]), font.main = c(22,"bold.italic")) + stat_pvalue_manual(stat.test, label = "P.adj.signif", hide.ns=TRUE)
figures[[tax]] <- p
print(p)
}
theme_set(theme_bw(base_size=25))
library(Cairo)
df <- meta(phy)
df <- bind_cols(df, A)
df$index <- df[[index]]
pv <- kruskal.test(data = df, index ~ factor(Geographical_location))$p.value
#kruskal.test(data = df, index ~factor(Geographical_location))
library(ggbeeswarm)
library(ggsignif)
#jpeg(file= "figure_location.jpeg", quality = 100)
p1 <- ggplot(df, aes(x = Geographical_location, y = index)) +
geom_boxplot(color = "black") +
geom_jitter(width = 0.1) +
theme(axis.text.x = element_text(angle = 0, hjust = 0.5)) + theme(legend.position = "none")+
labs(y = "Shannon Diversity",
x = "",
title = "Geographical location")
print(p1)
theme_set(theme_bw(base_size=25))
library(Cairo)
df <- meta(phy)
df <- bind_cols(df, A)
df$index <- df[[index]]
pv <- kruskal.test(data = df, index ~ factor(Geographical_location))$p.value
kruskal.test(data = df, index ~factor(Geographical_location))
library(ggbeeswarm)
library(ggsignif)
#jpeg(file= "figure_location.jpeg", quality = 100)
p1 <- ggplot(df, aes(x = Geographical_location, y = index)) +
geom_boxplot(color = "black") +
geom_jitter(width = 0.1) +
theme(axis.text.x = element_text(angle = 0, hjust = 0.5)) + theme(legend.position = "none")+
labs(y = "Shannon Diversity",
x = "",
title = "Geographical location")
print(p1)
rmarkdown::render("location.Rmd", output_format="md_document")
library(knitr)
library(knitcitations)
library(microbiome)
library(phyloseq)
library(ggplot2)
library(reshape2)
library(tidyverse)
library(dada2)
library(dplyr)
library(microbiome)
library(microbiome)
library(phyloseq)
library(vegan)
library(ggpubr)
theme_set(theme_bw(20))
knitr::opts_chunk$set(fig.width=10, fig.height=10, message=FALSE, warning=FALSE)
knitr::opts_chunk$set(fig.path="figure_location/")
opts_chunk$set(dev="CairoPNG")
# Was created with: source("create_phyloseq.R")
phy <- readRDS("data/processed/phyloseq/phy20.1.RDS")
method <- "PCoA"
trans <- "compositional"
distance <- "bray"
index <- "diversity_shannon"
# Estimate alpha diversities
A <- alpha(phy)
b <- meta(phy)
b2 <- bind_cols(b,A)
is.data.frame(b)
is.data.frame(b2)
z<- sapply(split(b2$diversity_shannon, b2$Geographical_location), mean)
f <- sapply(split(b2$diversity_shannon, b2$Geographical_location), sd)
v <- cbind(z,f)
kable(v)
theme_set(theme_bw(base_size=25))
library(Cairo)
df <- meta(phy)
df <- bind_cols(df, A)
df$index <- df[[index]]
pv <- kruskal.test(data = df, index ~ factor(Geographical_location))$p.value
kruskal.test(data = df, index ~factor(Geographical_location))
library(ggbeeswarm)
library(ggsignif)
p1 <- ggplot(df, aes(x = Geographical_location, y = index)) +
geom_boxplot(color = "black") +
geom_jitter(width = 0.1) +
theme(axis.text.x = element_text(angle = 0, hjust = 0.5)) + theme(legend.position = "none")+
labs(y = "Shannon Diversity",
x = "",
title = "Geographical location")
print(p1)
rmarkdown::render("location.Rmd", output_format="md_document")
