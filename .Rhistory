}
pvs <- sort(unlist(pvs))
significant.taxa <- names(pvs)[which(as.numeric(p.adjust(pvs)) < 0.25)]
# Pick full names for the taxa
full.names <- apply(tax_table(ps), 1, function (x) {paste(x, collapse = "_")})
pso<- prune_taxa(significant.taxa, ps)
pso1<- microbiome::transform(pso, 'clr')
g<- otu_table(pso1)
g1<-BBmisc::normalize(g@.Data, 'standardize', range = c(0,1))
colnames(g1)<- colnames(otu_table(pso1)@.Data)
j<- otu_table(g1, taxa_are_rows = T)
otu_table(pso1)<- j
p <- list()
sort.taxa <- neatsort(pso1, "rows")
##dfm <- tab <- data.frame(ASV = significant.taxa, Full_name = full.names[significant.taxa])
##dfm$short_name <- dfm$Full_name %>% strsplit("_" ) %>% sapply(tail, 1 )
#tab$short_names <- tab$Full_name %>% strsplit("_" ) %>% sapply(tail, 1 )
for(CST in CSTs) {
pshm <- prune_samples(sample_data(pso1)$CST == CST, pso1)
dfm <- melt(abundances(pshm))
dfm$short_name <- full.names[as.character(dfm$Var1)] %>% strsplit("_" ) %>% sapply(tail, 1 )
##colnames(dfm) <- c("Taxa", "Sample", "value")
colnames(dfm) <- c("short_name", "Sample", "value")
##dfm$Taxa <- factor(dfm$Taxa, levels = short_names)
##dfm$short_name <- factor(dfm$short_name)
# dfm$Sample <- factor(dfm$Sample, levels = neatsort(pshm, "cols"))
p[[CST]]<- heat((dfm), "Sample","short_name", "value", legend.text = "Abundance", order.rows = F,
order.cols = F, limits= c(-5,5), step = 0.5) +
ggtitle(paste("CST:", CST))
print(p[[CST]])
}
dfm$short_name <- full.names[as.character(dfm$short_name)] %>% strsplit("_" ) %>% sapply(tail, 1 )
theme_set(theme_bw(base_size = 20))
library(BBmisc)
library(reshape2)
library("RColorBrewer")
library(tidyr)
set.seed(1234)
# Identify ASVs that are most different between CSTs
pvs <- c()
for (tax in taxa(ps)) {
pvs[[tax]] <- kruskal.test(abundances(ps)[tax,] ~ meta(ps)$CST)$p.value
}
pvs <- sort(unlist(pvs))
significant.taxa <- names(pvs)[which(as.numeric(p.adjust(pvs)) < 0.25)]
# Pick full names for the taxa
full.names <- apply(tax_table(ps), 1, function (x) {paste(x, collapse = "_")})
pso<- prune_taxa(significant.taxa, ps)
pso1<- microbiome::transform(pso, 'clr')
g<- otu_table(pso1)
g1<-BBmisc::normalize(g@.Data, 'standardize', range = c(0,1))
colnames(g1)<- colnames(otu_table(pso1)@.Data)
j<- otu_table(g1, taxa_are_rows = T)
otu_table(pso1)<- j
p <- list()
sort.taxa <- neatsort(pso1, "rows")
##dfm <- tab <- data.frame(ASV = significant.taxa, Full_name = full.names[significant.taxa])
##dfm$short_name <- dfm$Full_name %>% strsplit("_" ) %>% sapply(tail, 1 )
#tab$short_names <- tab$Full_name %>% strsplit("_" ) %>% sapply(tail, 1 )
for(CST in CSTs) {
pshm <- prune_samples(sample_data(pso1)$CST == CST, pso1)
dfm <- melt(abundances(pshm))
dfm$short_name <- full.names[as.character(dfm$short_name)] %>% strsplit("_" ) %>% sapply(tail, 1 )
##colnames(dfm) <- c("Taxa", "Sample", "value")
colnames(dfm) <- c("short_name", "Sample", "value")
##dfm$Taxa <- factor(dfm$Taxa, levels = short_names)
##dfm$short_name <- factor(dfm$short_name)
# dfm$Sample <- factor(dfm$Sample, levels = neatsort(pshm, "cols"))
p[[CST]]<- heat((dfm), "Sample","short_name", "value", legend.text = "Abundance", order.rows = F,
order.cols = F, limits= c(-5,5), step = 0.5) +
ggtitle(paste("CST:", CST))
print(p[[CST]])
}
dfm$Var1
dfm$Var2
theme_set(theme_bw(base_size = 20))
library(BBmisc)
library(reshape2)
library("RColorBrewer")
library(tidyr)
set.seed(1234)
# Identify ASVs that are most different between CSTs
pvs <- c()
for (tax in taxa(ps)) {
pvs[[tax]] <- kruskal.test(abundances(ps)[tax,] ~ meta(ps)$CST)$p.value
}
for (tax in taxa(ps)) {
pvs[[tax]] <- kruskal.test(abundances(ps)[tax,] ~ meta(ps)$CST)$p.value
}
pvs <- sort(unlist(pvs))
significant.taxa <- names(pvs)[which(as.numeric(p.adjust(pvs)) < 0.25)]
# Pick full names for the taxa
full.names <- apply(tax_table(ps), 1, function (x) {paste(x, collapse = "_")})
pso<- prune_taxa(significant.taxa, ps)
pso1<- microbiome::transform(pso, 'clr')
g<- otu_table(pso1)
g1<-BBmisc::normalize(g@.Data, 'standardize', range = c(0,1))
colnames(g1)<- colnames(otu_table(pso1)@.Data)
otu_table(pso1)<- j
p <- list()
sort.taxa <- neatsort(pso1, "rows")
for(CST in CSTs) {
pshm <- prune_samples(sample_data(pso1)$CST == CST, pso1)
dfm <- melt(abundances(pshm))
p[[CST]]<- heat((dfm), "Sample","short_name", "value", legend.text = "Abundance", order.rows = F,
order.cols = F, limits= c(-5,5), step = 0.5) +
ggtitle(paste("CST:", CST))
print(p[[CST]])
dfm$short_name <- full.names[as.character(dfm$Var1)] %>% strsplit("_" ) %>% sapply(tail, 1 )
##colnames(dfm) <- c("Taxa", "Sample", "value")
colnames(dfm) <- c("short_name", "Sample", "value")
##dfm$Taxa <- factor(dfm$Taxa, levels = short_names)
##dfm$short_name <- factor(dfm$short_name)
# dfm$Sample <- factor(dfm$Sample, levels = neatsort(pshm, "cols"))
p[[CST]]<- heat((dfm), "Sample","short_name", "value", legend.text = "Abundance", order.rows = F,
order.cols = F, limits= c(-5,5), step = 0.5) +
ggtitle(paste("CST:", CST))
print(p[[CST]])
}
dfm <- tab <- data.frame(ASV = significant.taxa, Full_name = full.names[significant.taxa])
dfm$short_name <- dfm$Full_name %>% strsplit("_" ) %>% sapply(tail, 1 )
for(CST in CSTs) {
pshm <- prune_samples(sample_data(pso1)$CST == CST, pso1)
dfm <- melt(abundances(pshm))
p[[CST]]<- heat((dfm), "Sample","short_name", "value", legend.text = "Abundance", order.rows = F,
order.cols = F, limits= c(-5,5), step = 0.5) +
ggtitle(paste("CST:", CST))
print(p[[CST]])
dfm$short_name <- full.names[as.character(dfm$Var1)] %>% strsplit("_" ) %>% sapply(tail, 1 )
##colnames(dfm) <- c("Taxa", "Sample", "value")
colnames(dfm) <- c("short_name", "Sample", "value")
##dfm$Taxa <- factor(dfm$Taxa, levels = short_names)
##dfm$short_name <- factor(dfm$short_name)
# dfm$Sample <- factor(dfm$Sample, levels = neatsort(pshm, "cols"))
p[[CST]]<- heat((dfm), "Sample","short_name", "value", legend.text = "Abundance", order.rows = F,
order.cols = F, limits= c(-5,5), step = 0.5) +
ggtitle(paste("CST:", CST))
print(p[[CST]])
}
for(CST in CSTs) {
pshm <- prune_samples(sample_data(pso1)$CST == CST, pso1)
dfm <- melt(abundances(pshm))
p[[CST]]<- heat((dfm), "Sample","short_name", "value", legend.text = "Abundance", order.rows = F,
order.cols = F, limits= c(-5,5), step = 0.5) +
ggtitle(paste("CST:", CST))
print(p[[CST]])
}
for(CST in CSTs) {
pshm <- prune_samples(sample_data(pso1)$CST == CST, pso1)
dfm$short_name <- full.names[as.character(dfm$Var1)] %>% strsplit("_" ) %>% sapply(tail, 1)
dfm <- melt(abundances(pshm))
p[[CST]]<- heat((dfm), "Sample","short_name", "value", legend.text = "Abundance", order.rows = F,
order.cols = F, limits= c(-5,5), step = 0.5) +
ggtitle(paste("CST:", CST))
print(p[[CST]])
}
theme_set(theme_bw(base_size = 20))
library(BBmisc)
library(reshape2)
library("RColorBrewer")
library(tidyr)
set.seed(1234)
# Identify ASVs that are most different between CSTs
pvs <- c()
for (tax in taxa(ps)) {
pvs[[tax]] <- kruskal.test(abundances(ps)[tax,] ~ meta(ps)$CST)$p.value
}
pvs <- sort(unlist(pvs))
significant.taxa <- names(pvs)[which(as.numeric(p.adjust(pvs)) < 0.25)]
# Pick full names for the taxa
full.names <- apply(tax_table(ps), 1, function (x) {paste(x, collapse = "_")})
pso<- prune_taxa(significant.taxa, ps)
pso1<- microbiome::transform(pso, 'clr')
g<- otu_table(pso1)
g1<-BBmisc::normalize(g@.Data, 'standardize', range = c(0,1))
colnames(g1)<- colnames(otu_table(pso1)@.Data)
j<- otu_table(g1, taxa_are_rows = T)
otu_table(pso1)<- j
p <- list()
sort.taxa <- neatsort(pso1, "rows")
dfm <- tab <- data.frame(ASV = significant.taxa, Full_name = full.names[significant.taxa])
dfm$short_name <- dfm$Full_name %>% strsplit("_" ) %>% sapply(tail, 1 )
#tab$short_names <- tab$Full_name %>% strsplit("_" ) %>% sapply(tail, 1 )
for(CST in CSTs) {
pshm <- prune_samples(sample_data(pso1)$CST == CST, pso1)
#dfm$short_name <- full.names[as.character(dfm$Var1)] %>% strsplit("_" ) %>% sapply(tail, 1)
dfm <- melt(abundances(pshm))
dfm$short_name <- full.names[as.character(dfm$Var1)] %>% strsplit("_" ) %>% sapply(tail, 1)
p[[CST]]<- heat((dfm), "Sample","short_name", "value", legend.text = "Abundance", order.rows = F,
order.cols = F, limits= c(-5,5), step = 0.5) +
ggtitle(paste("CST:", CST))
print(p[[CST]])
}
for(CST in CSTs) {
pshm <- prune_samples(sample_data(pso1)$CST == CST, pso1)
dfm <- melt(abundances(pshm))
dfm$short_name <- full.names[as.character(dfm$Var1)] %>% strsplit("_" ) %>% sapply(tail, 1 )
##colnames(dfm) <- c("Taxa", "Sample", "value")
colnames(dfm) <- c("short_name", "Sample", "value")
##dfm$Taxa <- factor(dfm$Taxa, levels = short_names)
##dfm$short_name <- factor(dfm$short_name)
# dfm$Sample <- factor(dfm$Sample, levels = neatsort(pshm, "cols"))
p[[CST]]<- heat((dfm), "Sample","short_name", "value", legend.text = "Abundance", order.rows = F,
order.cols = F, limits= c(-5,5), step = 0.5) +
ggtitle(paste("CST:", CST))
print(p[[CST]])
}
theme_set(theme_bw(base_size = 20))
library("phyloseq")
library("ggplot2")
library("cluster")
library("igraph")
library("markovchain")
library("RColorBrewer")
library(microbiome)
library("gridExtra")
library(tidyr)
library(dplyr)
set.seed(455423)
options(stringsAsFactors = FALSE)
theme_set(theme_bw())
library("phyloseq")
library("ggplot2")
library("cluster")
library("igraph")
library("markovchain")
library("RColorBrewer")
library(microbiome)
library("gridExtra")
library(tidyr)
library(dplyr)
set.seed(455423)
options(stringsAsFactors = FALSE)
theme_set(theme_bw())
# Init / Read data
ps <- readRDS("data/processed/phyloseq/phy20.1.RDS")
tt <- data.frame(tax_table(ps))
ps <- transform(ps, "compositional")
# Init / Read data
ps <- readRDS("data/processed/phyloseq/phy20.1.RDS")
tt <- data.frame(tax_table(ps))
ps <- transform(ps, "compositional")
braydist <- phyloseq::distance(ps, method="bray")
ord <- ordinate(ps, method = "MDS", distance = braydist)
plot_scree(ord) + xlim(as.character(seq(1,15))) + ggtitle("MDS-bray ordination eigenvalues")
evs <- ord$value$Eigenvalues
print(evs[1:20])
print(tail(evs))
h_sub5 <- hist(evs[6:length(evs)], 100)
plot(h_sub5$mids, h_sub5$count, log="y", type='h', lwd=10, lend=2)
NDIM <- which(cumsum(evs^2/sum(evs^2)) > 0.9) - 1 # Pick components so that we reach 90% information
x <- ord$vectors[,1:NDIM]  # rows=sample, cols=MDS axes, entries = value
pamPCoA = function(x, k) {
list(cluster = pam(x[,1:2], k, cluster.only = TRUE))
}
gs <- clusGap(x, FUN = pamPCoA, K.max = 12, B = 50)
plot_clusgap(gs) + scale_x_continuous(breaks=c(seq(0, 12, 2)))
NDIM <- which(cumsum(evs^2/sum(evs^2)) > 0.9) - 1 # Pick components so that we reach 90% information
x <- ord$vectors[,1:NDIM]  # rows=sample, cols=MDS axes, entries = value
pamPCoA = function(x, k) {
list(cluster = pam(x[,1:2], k, cluster.only = TRUE))
}
gs <- clusGap(x, FUN = pamPCoA, K.max = 12, B = 50)
plot_clusgap(gs) + scale_x_continuous(breaks=c(seq(0, 12, 2)))
K <- 3
x <- ord$vectors[,1:NDIM]
clust <- as.factor(pam(x, k=K, cluster.only=T))
sample_data(ps)$CST <- clust
CSTs <- as.character(seq(K))
fisher.test(table(sample_data(ps)[, c("CST", "Geographical_location")]))
# Length 6 for consistency with pre-revision CST+ coloration
CSTColors <- brewer.pal(6,"Paired")[c(1,3,2,5,4,6)]
names(CSTColors) <- CSTs
#CSTColorScale <- scale_colour_discrete(name = "CST", values = CSTColors[1:K])
#CSTFillScale <- scale_fill_discrete(name = "CST", values = CSTColors[1:K])
ok <- ordinate(ps, method="NMDS", distance=braydist)
plot_ordination(ps, ok, color="CST") + ggtitle("NMDS -- bray -- CST")
plot_ordination(ps, ok, color="Geographical_location") + ggtitle("NMDS -- bray -- Location")
method <- "PCoA"
trans <- "compositional"
distance <- "bray"
p1 <- plot_landscape(microbiome::transform(ps , "compositional"),
distance = distance,
method = method,
size = 3,
col = "CST",
shading = FALSE) +
labs(title = "CST") +
scale_colour_brewer(palette = "Set1")
print(p1)
p2 <- plot_landscape(microbiome::transform(ps , "compositional"),
distance = distance,
method = method,
size = 3,
col = "Geographical_location",
shading = FALSE) +
labs(title = "Location") +
scale_colour_brewer(palette = "Set1")
print(p2)
library("phyloseq")
library("ggplot2")
library("cluster")
library("igraph")
library("markovchain")
library("RColorBrewer")
library(microbiome)
library("gridExtra")
library(tidyr)
library(dplyr)
set.seed(455423)
options(stringsAsFactors = FALSE)
theme_set(theme_bw())
# Init / Read data
ps <- readRDS("data/processed/phyloseq/phy20.1.RDS")
tt <- data.frame(tax_table(ps))
ps <- transform(ps, "compositional")
braydist <- phyloseq::distance(ps, method="bray")
ord <- ordinate(ps, method = "MDS", distance = braydist)
plot_scree(ord) + xlim(as.character(seq(1,15))) + ggtitle("MDS-bray ordination eigenvalues")
evs <- ord$value$Eigenvalues
print(evs[1:20])
print(tail(evs))
h_sub5 <- hist(evs[6:length(evs)], 100)
plot(h_sub5$mids, h_sub5$count, log="y", type='h', lwd=10, lend=2)
NDIM <- which(cumsum(evs^2/sum(evs^2)) > 0.9) - 1 # Pick components so that we reach 90% information
x <- ord$vectors[,1:NDIM]  # rows=sample, cols=MDS axes, entries = value
pamPCoA = function(x, k) {
list(cluster = pam(x[,1:2], k, cluster.only = TRUE))
}
gs <- clusGap(x, FUN = pamPCoA, K.max = 12, B = 50)
plot_clusgap(gs) + scale_x_continuous(breaks=c(seq(0, 12, 2)))
K <- 3
x <- ord$vectors[,1:NDIM]
clust <- as.factor(pam(x, k=K, cluster.only=T))
sample_data(ps)$CST <- clust
CSTs <- as.character(seq(K))
fisher.test(table(sample_data(ps)[, c("CST", "Geographical_location")]))
plot_ordination(ps, ok, color="CST") + ggtitle("NMDS -- bray -- CST")
plot_ordination(ps, ok, color="Geographical_location") + ggtitle("NMDS -- bray -- Location")
method <- "PCoA"
trans <- "compositional"
distance <- "bray"
p1 <- plot_landscape(microbiome::transform(ps , "compositional"),
distance = distance,
method = method,
size = 3,
col = "CST",
shading = FALSE) +
labs(title = "CST") +
scale_colour_brewer(palette = "Set1")
print(p1)
p2 <- plot_landscape(microbiome::transform(ps , "compositional"),
distance = distance,
method = method,
size = 3,
col = "Geographical_location",
shading = FALSE) +
labs(title = "Location") +
scale_colour_brewer(palette = "Set1")
print(p2)
method <- "PCoA"
trans <- "compositional"
distance <- "bray"
p1 <- plot_landscape(microbiome::transform(ps , "compositional"),
distance = distance,
method = method,
size = 3,
col = "CST",
shading = FALSE) +
labs(title = "CST") +
scale_colour_brewer(palette = "Set1")
print(p1)
p2 <- plot_landscape(microbiome::transform(ps , "compositional"),
distance = distance,
method = method,
size = 3,
col = "Geographical_location",
shading = FALSE) +
labs(title = "Location") +
scale_colour_brewer(palette = "Set1")
print(p2)
theme_set(theme_bw(base_size = 20))
library(BBmisc)
library(reshape2)
library("RColorBrewer")
library(tidyr)
set.seed(1234)
# Identify ASVs that are most different between CSTs
pvs <- c()
for (tax in taxa(ps)) {
pvs[[tax]] <- kruskal.test(abundances(ps)[tax,] ~ meta(ps)$CST)$p.value
}
pvs <- sort(unlist(pvs))
significant.taxa <- names(pvs)[which(as.numeric(p.adjust(pvs)) < 0.25)]
# Pick full names for the taxa
full.names <- apply(tax_table(ps), 1, function (x) {paste(x, collapse = "_")})
pso<- prune_taxa(significant.taxa, ps)
pso1<- microbiome::transform(pso, 'clr')
g<- otu_table(pso1)
g1<-BBmisc::normalize(g@.Data, 'standardize', range = c(0,1))
colnames(g1)<- colnames(otu_table(pso1)@.Data)
j<- otu_table(g1, taxa_are_rows = T)
otu_table(pso1)<- j
p <- list()
sort.taxa <- neatsort(pso1, "rows")
dfm <- tab <- data.frame(ASV = significant.taxa, Full_name = full.names[significant.taxa])
dfm$short_name <- dfm$Full_name %>% strsplit("_" ) %>% sapply(tail, 1 )
#tab$short_names <- tab$Full_name %>% strsplit("_" ) %>% sapply(tail, 1 )
for(CST in CSTs) {
pshm <- prune_samples(sample_data(pso1)$CST == CST, pso1)
dfm$short_name <- full.names[as.character(dfm$Var1)] %>% strsplit("_" ) %>% sapply(tail, 1 )
dfm <- melt(abundances(pshm))
##colnames(dfm) <- c("Taxa", "Sample", "value")
colnames(dfm) <- c("short_name", "Sample", "value")
##dfm$Taxa <- factor(dfm$Taxa, levels = short_names)
##dfm$short_name <- factor(dfm$short_name)
# dfm$Sample <- factor(dfm$Sample, levels = neatsort(pshm, "cols"))
p[[CST]]<- heat((dfm), "Sample","short_name", "value", legend.text = "Abundance", order.rows = F,
order.cols = F, limits= c(-5,5), step = 0.5) +
ggtitle(paste("CST:", CST))
print(p[[CST]])
}
library(knitr)
library(knitcitations)
library(microbiome)
library(phyloseq)
library(ggplot2)
library(reshape2)
library(tidyverse)
library(dada2)
library(dplyr)
library(microbiome)
library(microbiome)
library(phyloseq)
library(vegan)
theme_set(theme_bw(20))
knitr::opts_chunk$set(fig.width=10, fig.height=10, message=FALSE, warning=FALSE)
knitr::opts_chunk$set(fig.path="figure_location/")
opts_chunk$set(dev="CairoPNG")
# Was created with: source("create_phyloseq.R")
phy <- readRDS("data/processed/phyloseq/phy20.1.RDS")
method <- "PCoA"
trans <- "compositional"
distance <- "bray"
index <- "diversity_shannon"
# Estimate alpha diversities
A <- alpha(phy)
library(Cairo)
df <- meta(phy)
df <- bind_cols(df, A)
df$index <- df[[index]]
pv <- kruskal.test(data = df, index ~ factor(Geographical_location))$p.value
library(ggbeeswarm)
p1 <- ggplot(df, aes(x = Geographical_location, y = index, fill = Geographical_location)) +
ggbeeswarm::geom_beeswarm() +
theme(axis.text.x = element_text(angle = 0, hjust = 1)) +
labs(y = "Shannon Diversity",
x = "",
title = paste0("Kruskal test p=", round(pv, 2)))
print(p1)
library(readr)
library(tidyverse)
otu_data <- abundances(phy)
meta_data <- meta(phy)
# To get this, clone
# https://github.com/FrederickHuangLin/ANCOM.git
source("ANCOM/scripts/ancom_v2.1.R")
# Step 1: Data preprocessing
feature_table = otu_data;
sample_var = "Sample";
group_var = NULL
out_cut = 0.05;
zero_cut = 0.90;
lib_cut = 1000;
neg_lb = FALSE
prepro = feature_table_pre_process(feature_table,
meta_data,
sample_var,
group_var,
out_cut,
zero_cut,
lib_cut,
neg_lb)
feature_table = prepro$feature_table # Preprocessed feature table
meta_data = prepro$meta_data # Preprocessed metadata
struc_zero = prepro$structure_zeros # Structural zero info
# Step 2: ANCOM
main_var <- "Geographical_location";
p_adj_method <- "BH";
alpha <- 0.05
adj_formula <- NULL;
rand_formula <- NULL
res <- ANCOM(feature_table, meta_data, struc_zero,
main_var, p_adj_method,
alpha, adj_formula, rand_formula)
res.sorted <- res$out %>% arrange(desc(W))
top.taxa <- res.sorted[which(res.sorted[,3]), "taxa_id"]
head(res.sorted)
ps <- microbiome::transform(phy, "compositional")
d <- meta(ps)
for (tax in top.taxa) {
d$taxa <- abundances(ps)[tax, ]
d$gen <- taxa(ps)["genus", ]
p <- ggplot(d, aes(x = Geographical_location, y = taxa)) +
geom_boxplot() +
ggbeeswarm::geom_beeswarm() +
scale_y_log10()+
theme(axis.text.x = element_text(angle = 360, hjust = 1)) +
labs(x = "Location", y = "Abundance (CLR)", title = map_levels(tax, from='tax', to='genus',ps))
print(p)
title = map_levels(tax, from='tax', to='genus',ps)
}
