df12<- subset(gg, CST==1& Diet =="Mixed")
#df21<- subset(gg, CST==2& StVisit ==1)
#df22<- subset(gg, CST==2& StVisit ==2)
#df31<- subset(gg, CST==3& StVisit ==1)
#df32<- subset(gg, CST==3& StVisit ==2)
df1<- subset(gg, CST==1); df1<- df1[, -seq(1:46)]
df2<- subset(gg, CST==2); df2<- df2[, -seq(1:46)]
df3<- subset(gg, CST==3); df3<- df3[, -seq(1:46)]
#df4<- subset(gg, CST==4); df4<- df4[, -seq(1:46)]
#df5<- subset(gg, CST==5); df5<- df5[, -seq(1:46)]
#dim(df1[1]) + dim(df2[1]) +dim(df3[1]) +dim(df4[1]) +dim(df5[1])
ddddf1<- c(round(dim(df11)[1]/dim(df1)[1] *100,1))
ddddf2<-c(round(dim(df12)[1]/dim(df1)[1]*100 ,1))
dfdf<- cbind(ddddf1, ddddf2)
rownames(dfdf)<- c('Clust.1')
colnames(dfdf)<- c('Veg','Mixed')
library(knitr)
kable(dfdf)
gh<- xtabs(~  CST +Diet, data = gg)
addmargins(gh)
ff<- fisher.test(gh)
print('Fisher exact test p-value is: ')
print(ff$p.value)
knitr::knit("CSTAnalysis_SkinSample.Rmd")
knitr::knit("CSTAnalysis_SkinSample.Rmd")
knitr::knit("CSTAnalysis_SkinSamples.Rmd")
library("phyloseq")
library("ggplot2")
library("cluster")
library("igraph")
library("markovchain")
library("RColorBrewer")
library(microbiome)
library("gridExtra")
library(tidyr)
library(dplyr)
set.seed(455423)
options(stringsAsFactors = FALSE)
theme_set(theme_bw())
# Init / Read data
ps <- readRDS("data/processed/phyloseq/phy20.1.RDS")
tt <- data.frame(tax_table(ps))
ps <- transform(ps, "compositional")
braydist <- phyloseq::distance(ps, method="bray")
ord <- ordinate(ps, method = "MDS", distance = braydist)
plot_scree(ord) + xlim(as.character(seq(1,15))) + ggtitle("MDS-bray ordination eigenvalues")
evs <- ord$value$Eigenvalues
print(evs[1:20])
print(tail(evs))
h_sub5 <- hist(evs[6:length(evs)], 100)
plot(h_sub5$mids, h_sub5$count, log="y", type='h', lwd=10, lend=2)
NDIM <- 7
x <- ord$vectors[,1:NDIM]  # rows=sample, cols=MDS axes, entries = value
pamPCoA = function(x, k) {
list(cluster = pam(x[,1:2], k, cluster.only = TRUE))
}
gs <- clusGap(x, FUN = pamPCoA, K.max = 12, B = 50)
plot_clusgap(gs) + scale_x_continuous(breaks=c(seq(0, 12, 2)))
K <- 3
x <- ord$vectors[,1:NDIM]
clust <- as.factor(pam(x, k=K, cluster.only=T))
# SWAPPING THE ASSIGNMENT OF 2 AND 3 TO MATCH RAVEL CST ENUMERATION
clust[clust==2] <- NA
clust[clust==3] <- 2
clust[is.na(clust)] <- 3
sample_data(ps)$CST <- clust
CSTs <- as.character(seq(K))
# Length 6 for consistency with pre-revision CST+ coloration
CSTColors <- brewer.pal(6,"Paired")[c(1,3,2,5,4,6)]
names(CSTColors) <- CSTs
CSTColorScale <- scale_colour_manual(name = "CST", values = CSTColors[1:5])
CSTFillScale <- scale_fill_manual(name = "CST", values = CSTColors[1:5])
ok <- ordinate(ps, method="NMDS", distance=braydist)
plot_ordination(ps, ok, color="CST") + CSTColorScale + ggtitle("NMDS -- bray -- CST")
plot_ordination(ps, ok, color="Geographical_location") + ggtitle("NMDS -- bray -- Location")
method <- "PCoA"
trans <- "compositional"
distance <- "bray"
p1 <- plot_landscape(microbiome::transform(ps , "compositional"),
distance = distance,
method = method,
size = 3,
col = "CST",
shading = FALSE) +
labs(title = "CST") +
scale_colour_brewer(palette = "Set1")
print(p1)
p2 <- plot_landscape(microbiome::transform(ps , "compositional"),
distance = distance,
method = method,
size = 3,
col = "Geographical_location",
shading = FALSE) +
labs(title = "Location") +
scale_colour_brewer(palette = "Set1")
print(p2)
theme_set(theme_bw(base_size = 20))
library(BBmisc)
library(reshape2)
library("RColorBrewer")
library(tidyr)
set.seed(1234)
# Identify ASVs that are potentially different between CSTs
pvs <- c()
for (tax in taxa(ps)) {
pvs[[tax]] <- kruskal.test(abundances(ps)[tax,] ~ meta(ps)$CST)$p.value
}
pvs <- sort(unlist(pvs))
significant.taxa <- names(pvs)[which(as.numeric(p.adjust(pvs)) < 0.25)]
# Pick full names for the taxa
full.names <- apply(tax_table(ps), 1, function (x) {paste(x, collapse = "_")})
pso<- prune_taxa(significant.taxa, ps)
pso1<- microbiome::transform(pso, 'clr')
g<- otu_table(pso1)
g1<-BBmisc::normalize(g@.Data, 'standardize', range = c(0,1))
colnames(g1)<- colnames(otu_table(pso1)@.Data)
j<- otu_table(g1, taxa_are_rows = T)
otu_table(pso1)<- j
p <- list()
sort.taxa <- neatsort(pso1, "rows")
for(CST in CSTs) {
pshm <- prune_samples(sample_data(pso1)$CST == CST, pso1)
dfm <- melt(abundances(pshm))
colnames(dfm) <- c("Taxa", "Sample", "value")
dfm$Taxa <- factor(dfm$Taxa, levels = sort.taxa)
dfm$Sample <- factor(dfm$Sample, levels = neatsort(pshm, "cols"))
p[[CST]]<- heat((dfm), "Sample","Taxa", "value", legend.text = "Abundance", order.rows = F,
order.cols = F, limits= c(-5,5), step = 0.5) +
ggtitle(paste("CST:", CST))
print(p[[CST]])
}
theme_set(theme_bw(base_size = 20))
library(ggbeeswarm)
df<- meta(pso)
for (tax in rev(significant.taxa)) {
# Pick the abundance values for the given taxonomic group ("tax")
# Let us use compositional transformed values
df$signal <- abundances(transform(pso, "compositional"))[tax,]
# Retrieve the full name for this taxon
tax.full.name <- full.names[tax]
# Plot taxon abundance (signal) against the cluster (CST) as a boxplot
p <- ggplot(df, aes(x = CST, y = signal)) +
labs(title = tax) +
geom_boxplot() +
geom_beeswarm() +
labs(y = "Relative abundance (%)") +
scale_y_log10(labels = scales::percent)
print(p)
}
#Initializing data frame
otu_vs_sample <- data.frame(matrix(ncol = length(df$taxon),nrow = length(abundances(ps)[1,])))
library(knitr)
library(knitcitations)
library(microbiome)
library(phyloseq)
library(ggplot2)
library(reshape2)
library(tidyverse)
library(dada2)
library(dplyr)
library(microbiome)
library(microbiome)
library(phyloseq)
library(vegan)
theme_set(theme_bw(20))
knitr::opts_chunk$set(fig.width=10, fig.height=10, message=FALSE, warning=FALSE)
knitr::opts_chunk$set(fig.path="figure_location/")
opts_chunk$set(dev="CairoPNG")
# Was created with: source("create_phyloseq.R")
phy <- readRDS("data/processed/phyloseq/phy20.1.RDS")
method <- "PCoA"
trans <- "compositional"
distance <- "bray"
index <- "diversity_shannon"
# Estimate alpha diversities
A <- alpha(phy)
library(Cairo)
df <- meta(phy)
df <- bind_cols(df, A)
df$index <- df[[index]]
pv <- kruskal.test(data = df, index ~ factor(Geographical_location))$p.value
library(ggbeeswarm)
p1 <- ggplot(df, aes(x = Geographical_location, y = index, fill = Geographical_location)) +
ggbeeswarm::geom_beeswarm() +
theme(axis.text.x = element_text(angle = 0, hjust = 1)) +
labs(y = "Shannon Diversity",
x = "",
title = paste0("Kruskal test p=", round(pv, 2)))
print(p1)
location <- meta(phy)$Geographical_location
#Clr-transformation
A <- abundances(microbiome::transform(phy, "clr"))
pv <- apply(A, 1, function (x) {kruskal.test(x ~ location)$p.value});
padj <- p.adjust(pv);
df <- data.frame(taxon = names(padj), padj = padj)
# Add full names for the taxa
full.names <- apply(tax_table(phy), 1, function (x) {paste(x, collapse = "_")})
df$full_name <- full.names[df$taxon]
df <- df %>% filter(padj < 0.25) %>% arrange(padj)
rownames(df) <- NULL
library(knitr)
kable(df)
ps <- microbiome::transform(phy, "clr")
d <- meta(ps)
for (tax in df$taxon) {
d$taxa <- abundances(ps)[tax, ]
p <- ggplot(d, aes(x = Geographical_location, y = taxa)) +
geom_boxplot() +
ggbeeswarm::geom_beeswarm() +
theme(axis.text.x = element_text(angle = 360, hjust = 1)) +
labs(x = "Location", y = "Abundance (CLR)", title = tax)
print(p)
}
#Initializing data frame
otu_vs_sample <- data.frame(matrix(ncol = length(df$taxon),nrow = length(abundances(ps)[1,])))
colnames(otu_vs_sample) <- df$taxon
rownames(otu_vs_sample) <- colnames(abundances(ps))
otu_vs_sample$location <- NA
#Collecting the data to data frame
for (i in c(1:length(df$taxon))){
for (j in c(1:length(abundances(ps)[1,]))){
#Abundances e.g. otu_vs_sample["I1", "OTU237"] <- abundances(ps)["OTU237", I1"]
otu_vs_sample[rownames(otu_vs_sample)[j],colnames(otu_vs_sample)[i]] <- abundances(ps)[colnames(otu_vs_sample)[i],rownames(otu_vs_sample)[j]]
#Location information e.g.  otu_vs_sample$location[1] <- d$Geographical_location[d$Sample == "I1"]
otu_vs_sample$location[j] <- d$Geographical_location[d$Sample == rownames(otu_vs_sample)[j]]
}
}
#Rownames to data frame's 1st column
library(data.table)
setDT(otu_vs_sample, keep.rownames = TRUE)[]
colnames(otu_vs_sample)[1] <- "Sample"
#Subsetting data by location
pune_data <- otu_vs_sample %>% filter(location == "Pune")
ahmednagar_data <- otu_vs_sample %>% filter(location == "Ahmednagar")
nashik_data <- otu_vs_sample %>% filter(location == "Nashik")
#Deletes location data
pune_data$location <- NULL
ahmednagar_data$location <- NULL
nashik_data$location <- NULL
#Changing data frames' format
pune_data <- melt(pune_data)
colnames(pune_data) <- c("Sample", "Taxa", "value")
ahmednagar_data <- melt(ahmednagar_data)
colnames(ahmednagar_data) <- c("Sample", "Taxa", "value")
nashik_data <- melt(nashik_data)
colnames(nashik_data) <- c("Sample", "Taxa", "value")
#Creating heatmaps
pune_heat <- heat(pune_data, "Sample","Taxa", "value", legend.text = "Abundance",order.rows = F,
order.cols = F, limits= c(-10,10), step = 1) + ggtitle("Pune") + theme(axis.text = element_text(size = 8), axis.text.x = element_blank(), plot.title = element_text(size = 8), legend.title = element_text(size = 8), legend.text = element_text(size = 8), legend.key.height = unit(1.5, "cm"))
ahmednagar_heat <- heat(ahmednagar_data, "Sample","Taxa", "value", legend.text = "Abundance",order.rows = F,
order.cols = F, limits= c(-10,10), step = 1) + ggtitle("Ahmednagar") + theme(axis.text = element_text(size = 8), axis.text.x = element_blank(), plot.title = element_text(size = 8), legend.title = element_text(size = 8), legend.text = element_text(size = 8), legend.key.height = unit(1.5, "cm"))
nashik_heat <- heat(nashik_data, "Sample","Taxa", "value", legend.text = "Abundance",order.rows = F,
order.cols = F, limits= c(-10,10), step = 1) + ggtitle("Nashik") + theme(axis.text = element_text(size = 8), axis.text.x = element_blank(), plot.title = element_text(size = 8), legend.title = element_text(size = 8), legend.text = element_text(size = 8), legend.key.height = unit(1.5, "cm"))
#Arranging heatmaps to one picture
library(cowplot)
heatmap_grid <- plot_grid(pune_heat + theme(legend.position="none"), ahmednagar_heat + theme(legend.position="none"), nashik_heat + theme(legend.position="none"), ncol = 3, axis = "t", scale = 0.85)
#Displaying the heatmaps and legend
heatmap_grid + draw_grob(get_legend(pune_heat+ theme(legend.position="bottom", legend.key.width = unit(2, "cm"), legend.key.height = unit(0.2, "cm"))), 0.5, -0.38, 0, 1)
library(knitr)
require(knitcitations)
library(microbiome)
library(phyloseq)
library(ggplot2)
library(reshape2)
library(tidyverse)
library(dada2)
theme_set(theme_bw(20))
knitr::opts_chunk$set(fig.width=10, fig.height=10, message=FALSE, warning=FALSE)
core_detection <- .1/100
core_prevalence <- 50/100
# Was created with: source("create_phyloseq.R")
phy20.1 <- readRDS("data/processed/phyloseq/phy20.1.RDS")
ps <- aggregate_taxa(phy20.1, "genus")
ps <- microbiome::transform(ps, "compositional")
ps.core <- core(ps, detection = core_detection, prevalence = core_prevalence)
m <- round(100 * rowMeans(abundances(ps.core)), 1)
median <- round(100 * apply(abundances(ps.core), 1, median), 1)
prev <- round(100 * prevalence(ps.core, detection = core_detection), 1)
d <- as.data.frame(list(Taxon = names(m), Abundance_mean = m, Abundance_median = median, Prevalence = prev))
rownames(d) <- NULL
d <- d %>% arrange(desc(Abundance_mean), desc(Prevalence))
colnames(d) <- c("Taxon", "Mean Relative abundance (%)", "Median Relative abundance (%)", "Prevalence (%)")
kable(d)
ps <- aggregate_taxa(phy20.1, "phylum")
ps <- microbiome::transform(ps, "compositional")
ps.core <- core(ps, detection = core_detection, prevalence = core_prevalence)
m <- round(100 * rowMeans(abundances(ps.core)), 1)
median <- round(100 * apply(abundances(ps.core), 1, median), 1)
prev <- round(100 * prevalence(ps.core, detection = core_detection), 1)
d <- as.data.frame(list(Taxon = names(m), Abundance_mean = m, Abundance_median = median, Prevalence = prev))
rownames(d) <- NULL
d <- d %>% arrange(desc(Abundance_mean), desc(Prevalence))
colnames(d) <- c("Taxon", "Mean Relative abundance (%)", "Median Relative abundance (%)", "Prevalence (%)")
kable(d)
library(reshape2)
a <- aggregate_taxa(phy20.1, level = "phylum")
xc <- abundances(transform(a, "compositional"))
dfm <- melt(xc)
names(dfm) <- c("phylum", "sample", "value")
dfm$Phylum <- factor(dfm$phylum,
levels = as.character(unlist(dfm %>% group_by(phylum) %>%
summarise(mean = mean(value)) %>%
arrange(desc(mean)) %>%
select(phylum))))
# Add small constant on zero values
dfm$value[dfm$value == 0] <- min(dfm$value[dfm$value > 0])/2
# Plot abundance distribution for the phyla
p <- ggplot(dfm, aes(x = value, fill = phylum)) +
geom_density(alpha = 0.5) +
scale_x_log10(label = scales::percent) +
labs(x = "Relative abundance (%)", y = "Frequency",
title = "Phylum abundance distribution")
print(p)
theme_set(theme_bw(base_size = 13))
dfm <- melt(abundances(ps.core))
dfm$Var1 <- factor(dfm$Var1, levels = rev(d$Taxon))
dfm$Var_new = str_wrap(dfm$Var1, width = 40)
p2 <- ggplot(dfm, aes(x = Var_new, y = value)) +
geom_boxplot() +
geom_jitter(width = 0.1) +
scale_y_log10(label = scales::percent) +
coord_flip() + theme(legend.position="none") +
labs(y = "Relative abundance (%)", x = '', title = "Core abundance variation")
print(p2)
theme_set(theme_bw(base_size = 11))
library(RColorBrewer)
prevalences <- seq(.05, 1, .05)
detections <- 10^seq(log10(1e-3), log10(.2), length = 10)
ps <- microbiome::transform(ps, "compositional")
p1 <- plot_core(ps, plot.type = "heatmap",
prevalences = prevalences,
detections = detections,
colours = rev(brewer.pal(11, "Spectral")),
min.prevalence = .2, horizontal = FALSE)
print(p1)
theme_set(theme_bw(base_size = 13))
dfm <- melt(abundances(ps.core))
dfm$Var1 <- factor(dfm$Var1, levels = rev(d$Taxon))
dfm$Var_new = str_wrap(dfm$Var1, width = 40)
p2 <- ggplot(dfm, aes(x = Var_new, y = value)) +
geom_boxplot() +
geom_jitter(width = 0.1) +
scale_y_log10(label = scales::percent) +
coord_flip() + theme(legend.position="none") +
labs(y = "Relative abundance (%)", x = '', title = "Core abundance variation")
print(p2)
library(knitr)
require(knitcitations)
library(microbiome)
library(phyloseq)
library(ggplot2)
library(reshape2)
library(tidyverse)
library(dada2)
theme_set(theme_bw(20))
knitr::opts_chunk$set(fig.width=10, fig.height=10, message=FALSE, warning=FALSE)
core_detection <- .1/100
core_prevalence <- 50/100
# Was created with: source("create_phyloseq.R")
phy20.1 <- readRDS("data/processed/phyloseq/phy20.1.RDS")
ps <- aggregate_taxa(phy20.1, "genus")
ps <- microbiome::transform(ps, "compositional")
ps.core <- core(ps, detection = core_detection, prevalence = core_prevalence)
m <- round(100 * rowMeans(abundances(ps.core)), 1)
median <- round(100 * apply(abundances(ps.core), 1, median), 1)
prev <- round(100 * prevalence(ps.core, detection = core_detection), 1)
d <- as.data.frame(list(Taxon = names(m), Abundance_mean = m, Abundance_median = median, Prevalence = prev))
rownames(d) <- NULL
d <- d %>% arrange(desc(Abundance_mean), desc(Prevalence))
colnames(d) <- c("Taxon", "Mean Relative abundance (%)", "Median Relative abundance (%)", "Prevalence (%)")
kable(d)
theme_set(theme_bw(base_size = 13))
dfm <- melt(abundances(ps.core))
dfm$Var1 <- factor(dfm$Var1, levels = rev(d$Taxon))
dfm$Var_new = str_wrap(dfm$Var1, width = 40)
p2 <- ggplot(dfm, aes(x = Var_new, y = value)) +
geom_boxplot() +
geom_jitter(width = 0.1) +
scale_y_log10(label = scales::percent) +
coord_flip() + theme(legend.position="none") +
labs(y = "Relative abundance (%)", x = '', title = "Core abundance variation")
print(p2)
theme_set(theme_bw(base_size = 11))
library(RColorBrewer)
prevalences <- seq(.05, 1, .05)
detections <- 10^seq(log10(1e-3), log10(.2), length = 10)
ps <- microbiome::transform(ps, "compositional")
p1 <- plot_core(ps, plot.type = "heatmap",
prevalences = prevalences,
detections = detections,
colours = rev(brewer.pal(11, "Spectral")),
min.prevalence = .2, horizontal = FALSE)
print(p1)
library(reshape2)
a <- aggregate_taxa(phy20.1, level = "phylum")
xc <- abundances(transform(a, "compositional"))
dfm <- melt(xc)
names(dfm) <- c("phylum", "sample", "value")
dfm$Phylum <- factor(dfm$phylum,
levels = as.character(unlist(dfm %>% group_by(phylum) %>%
summarise(mean = mean(value)) %>%
arrange(desc(mean)) %>%
select(phylum))))
# Add small constant on zero values
dfm$value[dfm$value == 0] <- min(dfm$value[dfm$value > 0])/2
# Plot abundance distribution for the phyla
p <- ggplot(dfm, aes(x = value, fill = phylum)) +
geom_density(alpha = 0.5) +
scale_x_log10(label = scales::percent) +
labs(x = "Relative abundance (%)", y = "Frequency",
title = "Phylum abundance distribution")
print(p)
ps <- aggregate_taxa(phy20.1, "phylum")
ps <- microbiome::transform(ps, "compositional")
ps.core <- core(ps, detection = core_detection, prevalence = core_prevalence)
m <- round(100 * rowMeans(abundances(ps.core)), 1)
median <- round(100 * apply(abundances(ps.core), 1, median), 1)
prev <- round(100 * prevalence(ps.core, detection = core_detection), 1)
d <- as.data.frame(list(Taxon = names(m), Abundance_mean = m, Abundance_median = median, Prevalence = prev))
rownames(d) <- NULL
d <- d %>% arrange(desc(Abundance_mean), desc(Prevalence))
colnames(d) <- c("Taxon", "Mean Relative abundance (%)", "Median Relative abundance (%)", "Prevalence (%)")
kable(d)
theme_set(theme_bw(base_size = 13))
dfm <- melt(abundances(ps.core))
dfm$Var1 <- factor(dfm$Var1, levels = rev(d$Taxon))
dfm$Var_new = str_wrap(dfm$Var1, width = 40)
p2 <- ggplot(dfm, aes(x = Var_new, y = value)) +
geom_boxplot() +
geom_jitter(width = 0.1) +
scale_y_log10(label = scales::percent) +
coord_flip() + theme(legend.position="none") +
labs(y = "Relative abundance (%)", x = '', title = "Core abundance variation")
print(p2)
theme_set(theme_bw(base_size = 13))
dfm <- melt(abundances(ps.core))
dfm$Var1 <- factor(dfm$Var1, levels = rev(d$Taxon))
dfm$Var_new = str_wrap(dfm$Var1, width = 40)
p2 <- ggplot(dfm, aes(x = Var_new, y = value)) +
geom_boxplot() +
geom_jitter(width = 0.1) +
scale_y_log10(label = scales::percent) +
coord_flip() + theme(legend.position="none") +
labs(y = "Relative abundance (%)", x = '', title = "Core abundance variation")
print(p2)
library(knitr)
require(knitcitations)
library(microbiome)
library(phyloseq)
library(ggplot2)
library(reshape2)
library(tidyverse)
library(dada2)
theme_set(theme_bw(20))
knitr::opts_chunk$set(fig.width=10, fig.height=10, message=FALSE, warning=FALSE)
core_detection <- .1/100
core_prevalence <- 50/100
# Was created with: source("create_phyloseq.R")
phy20.1 <- readRDS("data/processed/phyloseq/phy20.1.RDS")
ps <- aggregate_taxa(phy20.1, "genus")
ps <- microbiome::transform(ps, "compositional")
ps.core <- core(ps, detection = core_detection, prevalence = core_prevalence)
m <- round(100 * rowMeans(abundances(ps.core)), 1)
median <- round(100 * apply(abundances(ps.core), 1, median), 1)
prev <- round(100 * prevalence(ps.core, detection = core_detection), 1)
d <- as.data.frame(list(Taxon = names(m), Abundance_mean = m, Abundance_median = median, Prevalence = prev))
rownames(d) <- NULL
d <- d %>% arrange(desc(Abundance_mean), desc(Prevalence))
colnames(d) <- c("Taxon", "Mean Relative abundance (%)", "Median Relative abundance (%)", "Prevalence (%)")
kable(d)
theme_set(theme_bw(base_size = 13))
dfm <- melt(abundances(ps.core))
dfm$Var1 <- factor(dfm$Var1, levels = rev(d$Taxon))
dfm$Var_new = str_wrap(dfm$Var1, width = 40)
p2 <- ggplot(dfm, aes(x = Var_new, y = value)) +
geom_boxplot() +
geom_jitter(width = 0.1) +
scale_y_log10(label = scales::percent) +
coord_flip() + theme(legend.position="none") +
labs(y = "Relative abundance (%)", x = '', title = "Core abundance variation")
print(p2)
theme_set(theme_bw(base_size = 11))
library(RColorBrewer)
prevalences <- seq(.05, 1, .05)
detections <- 10^seq(log10(1e-3), log10(.2), length = 10)
ps <- microbiome::transform(ps, "compositional")
p1 <- plot_core(ps, plot.type = "heatmap",
prevalences = prevalences,
detections = detections,
colours = rev(brewer.pal(11, "Spectral")),
min.prevalence = .2, horizontal = FALSE)
print(p1)
knitr::knit("coreanalysis.Rmd")
knitr::knit("coreanalysis.Rmd")
library(microbiome)
library(ggplot2)
library(dplyr)
pseq <- phy# Rename the example data
data = microbiome::meta(phy)
# Pick relative abundances (compositional) and sample metadata
pseq.rel <- microbiome::transform(pseq, "compositional")
otu <- abundances(pseq.rel)
meta <- meta(pseq.rel)
library(vegan)
library(phyloseq)
permanova <- adonis(t(otu) ~ Diet,
data = meta(phy), permutations=99, method = "bray")
# P-value
print(as.data.frame(permanova$aov.tab)["Diet", "Pr(>F)"])
dist <- vegdist(t(otu))
anova(betadisper(dist, meta$Diet))
knitr::knit("dietanalysis.Rmd")
