shading = FALSE) +
scale_colour_brewer(palette = "Set1")	+ labs(title = "Age")+ theme(legend.position = 'bottom')
print(p2)
gridExtra::grid.arrange(p, p1, p2, nrow = 1)
theme_set(theme_bw(30))
p <- plot_landscape(microbiome::transform(phy , "compositional"),
distance = distance,
method = method,
size = 5,
col = "Diet",
shading = FALSE) +
scale_colour_brewer(palette = "Set1")	+ labs(title = "Diet") + theme(legend.position = 'bottom')
#legend.direction = "horizontal",
#legend.box = "horizontal") +
#guides(color = guide_legend(title.position = "top",
#label.position = "bottom"))
print(p)
p1 <- plot_landscape(microbiome::transform(phy , "compositional"),
distance = distance,
method = method,
size = 5,
col = "Geographical_location",
shading = FALSE) +
scale_colour_brewer(palette = "Set1") + labs(title = "Location") + theme(legend.position = 'bottom')
print(p1)
theme_set(theme_bw(25))
p2 <- plot_landscape(microbiome::transform(phy , "compositional"),
distance = distance,
method = method,
size = 5,
col = "age_group",
shading = FALSE) +
scale_colour_brewer(palette = "Set1")	+ labs(title = "Age")+ theme(legend.position = 'bottom')
print(p2)
gridExtra::grid.arrange(p, p1, p2, nrow = 1)
p2 <- plot_landscape(microbiome::transform(phy , "compositional"),
distance = distance,
method = method,
size = 5,
col = "age_group",
shading = FALSE) +
scale_colour_brewer(palette = "Set1")	+ labs(title = "Age")+ theme(legend.position = 'bottom', legend.title=element_text(size=14))
print(p2)
p2 <- plot_landscape(microbiome::transform(phy , "compositional"),
distance = distance,
method = method,
size = 5,
col = "age_group",
shading = FALSE) +
scale_colour_brewer(palette = "Set1")	+ labs(title = "Age")+ theme(legend.position = 'bottom', legend.text=theme_text(size=14), legend.title=element_text(size=14))
p2 <- plot_landscape(microbiome::transform(phy , "compositional"),
distance = distance,
method = method,
size = 5,
col = "age_group",
shading = FALSE) +
scale_colour_brewer(palette = "Set1")	+ labs(title = "Age")+ theme(legend.position = 'bottom', legend.text=element_text(size=14), legend.title=element_text(size=14))
print(p2)
p2 <- plot_landscape(microbiome::transform(phy , "compositional"),
distance = distance,
method = method,
size = 5,
col = "age_group",
shading = FALSE) +
scale_colour_brewer(palette = "Set1")	+ labs(title = "Age")+ theme(legend.position = 'bottom', legend.text=element_text(size=20), legend.title=element_text(size=25))
print(p2)
theme_set(theme_bw(30))
p <- plot_landscape(microbiome::transform(phy , "compositional"),
distance = distance,
method = method,
size = 5,
col = "Diet",
shading = FALSE) +
scale_colour_brewer(palette = "Set1")	+ labs(title = "Diet") + theme(legend.position = 'bottom')
#legend.direction = "horizontal",
#legend.box = "horizontal") +
#guides(color = guide_legend(title.position = "top",
#label.position = "bottom"))
print(p)
p1 <- plot_landscape(microbiome::transform(phy , "compositional"),
distance = distance,
method = method,
size = 5,
col = "Geographical_location",
shading = FALSE) +
scale_colour_brewer(palette = "Set1") + labs(title = "Location") + theme(legend.position = 'bottom')
print(p1)
theme_set(theme_bw(25))
p2 <- plot_landscape(microbiome::transform(phy , "compositional"),
distance = distance,
method = method,
size = 5,
col = "age_group",
shading = FALSE) +
scale_colour_brewer(palette = "Set1")	+ labs(title = "Age")+ theme(legend.position = 'bottom', legend.text=element_text(size=20), legend.title=element_text(size=25))
print(p2)
gridExtra::grid.arrange(p, p1, p2, nrow = 1)
theme_set(theme_bw(30))
p <- plot_landscape(microbiome::transform(phy , "compositional"),
distance = distance,
method = method,
size = 5,
col = "Diet",
shading = FALSE) +
scale_colour_brewer(palette = "Set1")	+ labs(title = "Diet") + theme(legend.position = 'bottom')
#legend.direction = "horizontal",
#legend.box = "horizontal") +
#guides(color = guide_legend(title.position = "top",
#label.position = "bottom"))
print(p)
p1 <- plot_landscape(microbiome::transform(phy , "compositional"),
distance = distance,
method = method,
size = 5,
col = "Geographical_location",
shading = FALSE) +
scale_colour_brewer(palette = "Set1") + labs(title = "Location") + theme(legend.position = 'bottom', legend.text=element_text(size=20), legend.title=element_text(size=25)))
theme_set(theme_bw(30))
p <- plot_landscape(microbiome::transform(phy , "compositional"),
distance = distance,
method = method,
size = 5,
col = "Diet",
shading = FALSE) +
scale_colour_brewer(palette = "Set1")	+ labs(title = "Diet") + theme(legend.position = 'bottom')
#legend.direction = "horizontal",
#legend.box = "horizontal") +
#guides(color = guide_legend(title.position = "top",
#label.position = "bottom"))
print(p)
p1 <- plot_landscape(microbiome::transform(phy , "compositional"),
distance = distance,
method = method,
size = 5,
col = "Geographical_location",
shading = FALSE) +
scale_colour_brewer(palette = "Set1") + labs(title = "Location") + theme(legend.position = 'bottom', legend.text=element_text(size=20), legend.title=element_text(size=25))
print(p1)
p2 <- plot_landscape(microbiome::transform(phy , "compositional"),
distance = distance,
method = method,
size = 5,
col = "age_group",
shading = FALSE) +
scale_colour_brewer(palette = "Set1")	+ labs(title = "Age")+ theme(legend.position = 'bottom', legend.text=element_text(size=20), legend.title=element_text(size=25))
print(p2)
gridExtra::grid.arrange(p, p1, p2, nrow = 1)
theme_set(theme_bw(30))
p <- plot_landscape(microbiome::transform(phy , "compositional"),
distance = distance,
method = method,
size = 5,
col = "Diet",
shading = FALSE) +
scale_colour_brewer(palette = "Set1")	+ labs(title = "Diet") + theme(legend.position = 'bottom')
#legend.direction = "horizontal",
#legend.box = "horizontal") +
#guides(color = guide_legend(title.position = "top",
#label.position = "bottom"))
print(p)
p1 <- plot_landscape(microbiome::transform(phy , "compositional"),
distance = distance,
method = method,
size = 5,
col = "Geographical_location",
shading = FALSE) +
scale_colour_brewer(palette = "Set1") + labs(title = "Location") + theme(legend.position = 'bottom', legend.text=element_text(size=15), legend.title=element_text(size=25))
print(p1)
p2 <- plot_landscape(microbiome::transform(phy , "compositional"),
distance = distance,
method = method,
size = 5,
col = "age_group",
shading = FALSE) +
scale_colour_brewer(palette = "Set1")	+ labs(title = "Age")+ theme(legend.position = 'bottom', legend.text=element_text(size=20), legend.title=element_text(size=25))
print(p2)
gridExtra::grid.arrange(p, p1, p2, nrow = 1)
theme_set(theme_bw(30))
p <- plot_landscape(microbiome::transform(phy , "compositional"),
distance = distance,
method = method,
size = 5,
col = "Diet",
shading = FALSE) +
scale_colour_brewer(palette = "Set1")	+ labs(title = "Diet") + theme(legend.position = 'bottom')
#legend.direction = "horizontal",
#legend.box = "horizontal") +
#guides(color = guide_legend(title.position = "top",
#label.position = "bottom"))
print(p)
p1 <- plot_landscape(microbiome::transform(phy , "compositional"),
distance = distance,
method = method,
size = 5,
col = "Geographical_location",
shading = FALSE) +
scale_colour_brewer(palette = "Set1") + labs(title = "Location") + theme(legend.position = 'bottom', legend.text=element_text(size=12), legend.title=element_text(size=22))
print(p1)
p2 <- plot_landscape(microbiome::transform(phy , "compositional"),
distance = distance,
method = method,
size = 5,
col = "age_group",
shading = FALSE) +
scale_colour_brewer(palette = "Set1")	+ labs(title = "Age")+ theme(legend.position = 'bottom', legend.text=element_text(size=20), legend.title=element_text(size=25))
print(p2)
gridExtra::grid.arrange(p, p1, p2, nrow = 1)
library("phyloseq")
library("ggplot2")
library("cluster")
library("igraph")
library("markovchain")
library("RColorBrewer")
library(microbiome)
library("gridExtra")
library(tidyr)
library(dplyr)
set.seed(455423)
options(stringsAsFactors = FALSE)
theme_set(theme_bw())
knit("jointanalysis.Rmd")
library(knitr)
knit("jointanalysis.Rmd")
knit("dietanalysis.Rmd")
knit("coreanalysis.Rmd")
knit("locationanalysis.Rmd")
knit("ageanalysis.Rmd")
knit("analysisCST.Rmd")
library(knitr)
require(knitcitations)
library(microbiome)
library(phyloseq)
library(ggplot2)
library(reshape2)
library(tidyverse)
library(dada2)
theme_set(theme_bw(20))
knitr::opts_chunk$set(fig.width=10, fig.height=10, message=FALSE, warning=FALSE)
core_detection <- .1/100
core_prevalence <- 50/100
# Was created with: source("create_phyloseq.R")
phy20.1 <- readRDS("data/processed/phyloseq/phy20.1.RDS")
ps <- aggregate_taxa(phy20.1, "genus")
ps <- microbiome::transform(ps, "compositional")
ps.core <- core(ps, detection = core_detection, prevalence = core_prevalence)
m <- round(100 * rowMeans(abundances(ps.core)), 1)
median <- round(100 * apply(abundances(ps.core), 1, median), 1)
prev <- round(100 * prevalence(ps.core, detection = core_detection), 1)
d <- as.data.frame(list(Taxon = names(m), Abundance_mean = m, Abundance_median = median, Prevalence = prev))
rownames(d) <- NULL
d <- d %>% arrange(desc(Abundance_mean), desc(Prevalence))
colnames(d) <- c("Taxon", "Mean Relative abundance (%)", "Median Relative abundance (%)", "Prevalence (%)")
kable(d)
theme_set(theme_bw(base_size = 11))
library(RColorBrewer)
prevalences <- seq(.05, 1, .05)
detections <- 10^seq(log10(1e-3), log10(.2), length = 10)
ps <- microbiome::transform(ps, "compositional")
p1 <- plot_core(ps, plot.type = "heatmap",
prevalences = prevalences,
detections = detections,
colours = rev(brewer.pal(11, "Spectral")),
min.prevalence = .2, horizontal = FALSE)
print(p1)
ps <- aggregate_taxa(phy20.1, "phylum")
ps <- microbiome::transform(ps, "compositional")
ps.core <- core(ps, detection = core_detection, prevalence = core_prevalence)
m <- round(100 * rowMeans(abundances(ps.core)), 1)
#median <- round(100 * apply(abundances(ps.core), 1, median), 1)
prev <- round(100 * prevalence(ps.core, detection = core_detection), 1)
d <- as.data.frame(list(Taxon = names(m), Abundance_mean = m, Abundance_median = median, Prevalence = prev))
ps <- aggregate_taxa(phy20.1, "phylum")
ps <- microbiome::transform(ps, "compositional")
ps.core <- core(ps, detection = core_detection, prevalence = core_prevalence)
m <- round(100 * rowMeans(abundances(ps.core)), 1)
#median <- round(100 * apply(abundances(ps.core), 1, median), 1)
prev <- round(100 * prevalence(ps.core, detection = core_detection), 1)
d <- as.data.frame(list(Taxon = names(m), Abundance_mean = m, Prevalence = prev))
rownames(d) <- NULL
d <- d %>% arrange(desc(Abundance_mean), desc(Prevalence))
colnames(d) <- c("Taxon", "Mean Relative abundance (%)", "Prevalence (%)")
kable(d)
library(knitr)
a <- aggregate_taxa(phy20.1, level = "genus")
xc <- abundances(transform(a, "compositional"))
df <- melt(xc)
names(df) <- c("Genus", "sample", "value")
dfm <- df %>% group_by(Genus) %>%
summarise(mean = round(100 * mean(value), 1),
#median = round(100 * median(value), 1),
#min = round(100 * min(value), 1),
#max = round(100 * max(value), 1),
prevalence = round(100 * prevalence(value), 1))%>%
arrange(desc(mean))
kable(dfm)
write.csv(dfm, file="genus table.csv")
#prevalence = round(100 * prevalence(value), 1)
names(dfm)
kable(dfm)
library(knitr)
a <- aggregate_taxa(phy20.1, level = "genus")
xc <- abundances(transform(a, "compositional"))
df <- melt(xc)
names(df) <- c("Genus", "sample", "value")
dfm <- df %>% group_by(Genus) %>%
summarise(mean = round(100 * mean(value), 1),
#median = round(100 * median(value), 1),
#min = round(100 * min(value), 1),
#max = round(100 * max(value), 1),
prevalence = round(100 * prevalence(value), 1))%>%
arrange(desc(mean))
kable(dfm)
write.csv(dfm, file="genus table.csv")
library(knitr)
a <- aggregate_taxa(phy20.1, level = "genus")
xc <- abundances(transform(a, "compositional"))
df <- melt(xc)
names(df) <- c("Genus", "sample", "value")
dfm <- df %>% group_by(Genus) %>%
summarise(mean = round(100 * mean(value), 1),
#median = round(100 * median(value), 1),
#min = round(100 * min(value), 1),
#max = round(100 * max(value), 1),
prevalence = round(100 * prevalence(value), 1))%>%
arrange(desc(mean))
kable(dfm, nrows = 20)
#write.csv(dfm, file="genus table.csv")
print(dfm, nrow(20))
print(dfm, nrow=20)
library(knitr)
a <- aggregate_taxa(phy20.1, level = "genus")
xc <- abundances(transform(a, "compositional"))
df <- melt(xc)
names(df) <- c("Genus", "sample", "value")
dfm <- df %>% group_by(Genus) %>%
summarise(mean = round(100 * mean(value), 1),
#median = round(100 * median(value), 1),
#min = round(100 * min(value), 1),
#max = round(100 * max(value), 1),
prevalence = round(100 * prevalence(value), 1))%>%
arrange(desc(mean))
kable(dfm)
#write.csv(dfm, file="genus table.csv")
library(knitr)
a <- aggregate_taxa(phy20.1, level = "genus")
xc <- abundances(transform(a, "compositional"))
df <- melt(xc)
names(df) <- c("Genus", "sample", "value")
dfm <- df %>% group_by(Genus) %>%
summarise(mean = round(100 * mean(value), 1),
#median = round(100 * median(value), 1),
#min = round(100 * min(value), 1),
#max = round(100 * max(value), 1),
prevalence = round(100 * prevalence(value), 1))%>%
arrange(desc(mean))
kable(dfm)
#write.csv(dfm, file="genus table.csv")
#write.csv(dfm, file="genus table.csv")
library(data.table)
args(data.table:::print.data.table)
function (dfm, nrows = 10L)
#write.csv(dfm, file="genus table.csv")
library(data.table)
a <- data.table:::print.data.table(dfm, nrows = 10)
a <- data.table:::print.data.table(dfm, nrows = 20)
a <- data.table:::print.data.table(dfm, nrows = 20, topn=20)
a <- data.table:::print.data.table(dfm, nrows = 18, topn=20)
a <- data.table:::print.data.table(dfm, nrows = 18, topn=18)
b <- slice(a, 1:(n() - 654))
print(b)
library(knitr)
a <- aggregate_taxa(phy20.1, level = "genus")
xc <- abundances(transform(a, "compositional"))
df <- melt(xc)
names(df) <- c("Genus", "sample", "value")
dfm <- df %>% group_by(Genus) %>%
summarise(mean = round(100 * mean(value), 1),
#median = round(100 * median(value), 1),
#min = round(100 * min(value), 1),
#max = round(100 * max(value), 1),
prevalence = round(100 * prevalence(value), 1))%>%
arrange(desc(mean))
kable(dfm)
#write.csv(dfm, file="genus table.csv")
library(data.table)
a <- data.table:::print.data.table(dfm, nrows = 18, topn=18)
library(knitr)
a <- aggregate_taxa(phy20.1, level = "genus")
xc <- abundances(transform(a, "compositional"))
df <- melt(xc)
names(df) <- c("Genus", "sample", "value")
dfm <- df %>% group_by(Genus) %>%
summarise(mean = round(100 * mean(value), 1),
#median = round(100 * median(value), 1),
#min = round(100 * min(value), 1),
#max = round(100 * max(value), 1),
prevalence = round(100 * prevalence(value), 1))%>%
arrange(desc(mean))
#kable(dfm)
#write.csv(dfm, file="genus table.csv")
library(data.table)
a <- data.table:::print.data.table(dfm, nrows = 18, topn=18)
a <- data.table:::print.data.table(dfm, nrows = 18, topn=18, bottomn=0)
knit("coreanalysis.Rmd")
library(knitr)
require(knitcitations)
library(microbiome)
library(phyloseq)
library(ggplot2)
library(reshape2)
library(tidyverse)
library(dada2)
theme_set(theme_bw(20))
knitr::opts_chunk$set(fig.width=10, fig.height=10, message=FALSE, warning=FALSE)
core_detection <- .1/100
core_prevalence <- 50/100
# Was created with: source("create_phyloseq.R")
phy20.1 <- readRDS("data/processed/phyloseq/phy20.1.RDS")
ps <- aggregate_taxa(phy20.1, "phylum")
ps <- microbiome::transform(ps, "compositional")
ps.core <- core(ps, detection = core_detection, prevalence = core_prevalence)
m <- round(100 * rowMeans(abundances(ps.core)), 1)
#median <- round(100 * apply(abundances(ps.core), 1, median), 1)
prev <- round(100 * prevalence(ps.core, detection = core_detection), 1)
d <- as.data.frame(list(Taxon = names(m), Abundance_mean = m, Prevalence = prev))
rownames(d) <- NULL
d <- d %>% arrange(desc(Abundance_mean), desc(Prevalence))
colnames(d) <- c("Taxon", "Mean Relative abundance (%)", "Prevalence (%)")
kable(d)
library(knitr)
a <- aggregate_taxa(phy20.1, level = "genus")
xc <- abundances(transform(a, "compositional"))
df <- melt(xc)
names(df) <- c("Genus", "sample", "value")
dfm <- df %>% group_by(Genus) %>%
summarise(mean = round(100 * mean(value), 1),
#median = round(100 * median(value), 1),
#min = round(100 * min(value), 1),
#max = round(100 * max(value), 1),
prevalence = round(100 * prevalence(value), 1))%>%
arrange(desc(mean))
#kable(dfm)
#write.csv(dfm, file="genus table.csv")
library(data.table)
a <- data.table:::print.data.table(dfm, nrows = 18, topn=18)
library(knitr)
tab <- data.frame(ASV = significant.taxa, Full_name = full.names[significant.taxa])
rownames(tab) <- NULL
kable(tab)
knit(analysisCST.Rmd)
knit("analysisCST.Rmd")
knit("jointanalysis.Rmd")
library(microbiome)
opts_chunk$set(dev="CairoPNG")
# Estimate alpha diversities
A <- alpha(phy)
index <- "diversity_shannon"
head(A)
c <- meta(phy)
c2 <- bind_cols(c,A)
is.data.frame(c)
is.data.frame(c2)
i <- sapply(split(t2$diversity_shannon, t2$age_group), mean)
#c <- round(100 * sapply(split(c2$diversity_shannon, c2$age_group), mean),2)
kable(i)
theme_set(theme_bw(20))
library(microbiome)
p <- plot_landscape(microbiome::transform(Q , "compositional"),
distance = "bray",
method = "PCoA",
size = 3,
col = "age_group",
shading = FALSE) +
scale_colour_brewer(palette = "Set1") +labs(title = "Age")
print(p)
knit("ageanalysis.Rmd")
library(microbiome)
library(ggplot2)
library(dplyr)
pseq <- phy# Rename the example data
data = microbiome::meta(phy)
# Pick relative abundances (compositional) and sample metadata
pseq.rel <- microbiome::transform(pseq, "compositional")
otu <- abundances(pseq.rel)
meta <- meta(pseq.rel)
library(vegan)
library(phyloseq)
permanova <- adonis(t(otu) ~ Diet,
data = meta(phy), permutations=99, method = "bray")
# P-value
print(as.data.frame(permanova$aov.tab)["Diet", "Pr(>F)"])
dist <- vegdist(t(otu))
anova(betadisper(dist, meta$Diet))
library(microbiome)
library(ggplot2)
library(dplyr)
pseq <- phy# Rename the example data
data = microbiome::meta(phy)
# Pick relative abundances (compositional) and sample metadata
pseq.rel <- microbiome::transform(pseq, "compositional")
otu <- abundances(pseq.rel)
meta <- meta(pseq.rel)
library(vegan)
library(phyloseq)
permanova <- adonis(t(otu) ~ age_group,
data = meta(phy), permutations=99, method = "bray")
# P-value
print(as.data.frame(permanova$aov.tab)["age_group", "Pr(>F)"])
dist <- vegdist(t(otu))
anova(betadisper(dist, meta$age_group))
knit("Dietanalysis.Rmd")
knit("ageanalysis.Rmd")
