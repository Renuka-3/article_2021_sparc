taxa <- core_members(pseq.comp, detection = det.th, prevalence = prev.th)
pseq <- prune_taxa(taxa, pseq)
dat <- abundances(pseq)
count <- as.matrix(t(dat))
# Define here the max (possible) number of clusters. The higher it is, the slower the computing.
max.clusters <- 5
quiet(fit <- lapply(1:max.clusters, dmn, count = count, verbose=TRUE))
lplc <- sapply(fit, laplace)
aic  <- sapply(fit, AIC)
bic  <- sapply(fit, BIC)
best <- fit[[which.min(unlist(lplc))]]
# mixturewt(best)
ass <- apply(mixture(best), 1, which.max)
full.names <- apply(tax_table(phy), 1, function (x) {paste(x, collapse = "_")})
for (k in seq(ncol(fitted(best)))) {
d <- melt(fitted(best))
colnames(d) <- c("OTU", "cluster", "value")
# Add full names
d$full_name <- gsub("Bacteria_", "", full.names[d$OTU])
d <- subset(d, cluster == k) %>%
# Arrange OTUs by assignment strength
arrange(value) %>%
mutate(OTU = factor(OTU, levels = unique(OTU))) %>%
# Only show the most important drivers
filter(abs(value) > quantile(abs(value), 0.8))
p <- ggplot(d, aes(x = full_name, y = value)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = paste("Top drivers: community type", k))
print(p)
}
knitr::knit("CSTAnalysis_SkinSamples.Rmd")
#theme_set(theme_bw(15))
method <- "PCoA"
trans <- "compositional"
distance <- "bray"
phy <- readRDS("data/processed/phyloseq/phy20.1.RDS")
ass <- 3
sample_data(phy)$community_type <- factor(ass[rownames(sample_data(phy))])
library("phyloseq")
library("ggplot2")
library("cluster")
library("igraph")
library("markovchain")
library("RColorBrewer")
library(microbiome)
library("gridExtra")
set.seed(455423)
default.par <- par(no.readonly = TRUE)
options(stringsAsFactors = FALSE)
theme_set(theme_bw())
# EXCLUDEMARGINAL is a flag to exclude marginally preterm births (=37 weeks) in the later analysis
#EXCLUDEMARGINAL = TRUE
#site <- "Vaginal_Swab"
ps <- readRDS("data/processed/phyloseq/phy20.1.RDS")
tt <- data.frame(tax_table(ps))
ps <- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))
ps1<- prune_taxa(names(sort(taxa_sums(ps), T))[1:50], ps)
taxa.order1<- taxa_names(ps1)
braydist <- phyloseq::distance(ps, method="bray")
ord = ordinate(ps, method = "MDS", distance = braydist)
plot_scree(ord) + xlim(as.character(seq(1,15))) + ggtitle("MDS-bray ordination eigenvalues")
evs <- ord$value$Eigenvalues
print(evs[1:20])
print(tail(evs))
h_sub5 <- hist(evs[6:length(evs)], 100)
plot(h_sub5$mids, h_sub5$count, log="y", type='h', lwd=10, lend=2)
NDIM <- 7
x <- ord$vectors[,1:NDIM]  # rows=sample, cols=MDS axes, entries = value
pamPCoA = function(x, k) {
list(cluster = pam(x[,1:2], k, cluster.only = TRUE))
}
gs = clusGap(x, FUN = pamPCoA, K.max = 12, B = 50)
plot_clusgap(gs) + scale_x_continuous(breaks=c(seq(0, 12, 2)))
K <- 3
x <- ord$vectors[,1:NDIM]
clust <- as.factor(pam(x, k=K, cluster.only=T))
# SWAPPING THE ASSIGNMENT OF 2 AND 3 TO MATCH RAVEL CST ENUMERATION
clust[clust==2] <- NA
clust[clust==3] <- 2
clust[is.na(clust)] <- 3
sample_data(ps)$CST <- clust
CSTs <- as.character(seq(K))
CSTColors <- brewer.pal(6,"Paired")[c(1,3,2,5,4,6)] # Length 6 for consistency with pre-revision CST+ coloration
names(CSTColors) <- CSTs
CSTColorScale <- scale_colour_manual(name = "CST", values = CSTColors[1:5])
CSTFillScale <- scale_fill_manual(name = "CST", values = CSTColors[1:5])
#grid.arrange(phyloseq::plot_ordination(ps, ord, color="CST") + CSTColorScale,plot_ordination(ps, ord, axes=c(3,4), color="CST") + CSTColorScale, main="Ordination by Cluster")
ok<-ordinate(ps, method="NMDS", distance=braydist)
knitr::opts_chunk$set(results = "hide")
plot_ordination(ps,ok , color="CST") + CSTColorScale + ggtitle("NMDS -- bray -- By Cluster")
theme_set(theme_bw(base_size = 15))
o<- ordinate(ps, method = 'NMDS', distance = braydist)
ps1<- prune_samples(sample_data(ps)$Diet == "Veg", ps)
#o1<- ordinate(ps1, method="NMDS", distance=braydist)
m1<- meta(ps1)
oo1<- o$points[rownames(m1),]
oo1<- as.data.frame(oo1)
ps2<- prune_samples(sample_data(ps)$Diet == "Mixed", ps)
m2<- meta(ps2)
#o2<- ordinate(ps2, method="NMDS", distance=braydist)
oo2<- o$points[rownames(m2),]
oo2<- as.data.frame(oo2)
knitr::opts_chunk$set(results = "hide")
theme_set(theme_bw(base_size = 10))
p1<- list()
m1<-meta(ps)$Veg
for(i in levels(m1)) {
pshm1 <- prune_samples(sample_data(ps1)$Diet == "Veg", ps1)
n<- rownames(meta(pshm1))
df1<-oo1[n,]
df<- cbind(df1, meta(pshm1))
p1[[i]]<-ggplot(df, aes(x = MDS1, y = MDS2, color = CST))+ geom_point(size= 1.5)+ labs(title = paste0(i), subtitle = '') +  xlim(-1, 1)+ ylim(-.5, .5)
#print(p1[[i]])
}
p2<- list()
for(i in levels(m1)) {
pshm2 <- prune_samples(sample_data(ps2)$Diet == "Mixed", ps2)
n<- rownames(meta(pshm2))
df3<-oo2[n,]
df2<-cbind(df3, meta(pshm2))
p2[[i]]<-ggplot(df2, aes(x = MDS1, y = MDS2, color = CST))+ geom_point(size= 1.5)+ labs(title = paste0(i), subtitle = '') + xlim(-1, 1)+ ylim(-.5, .5)
#print(p2[[i]])
}
theme_set(theme_bw(base_size = 10))
library(cowplot)
library(multipanelfigure)
#figure1 <- multi_panel_figure(columns = 1, rows = 2, panel_label_type = "none")
#figure1 %<>%
#fill_panel(p1$"Veg", column = 1, row = 1) %<>%
#fill_panel(p1$`2nd group`, column = 2, row = 1) %<>%
#fill_panel(p1$`3rd group`, column = 3, row = 1) %<>%
#fill_panel(p1$`4th group`, column = 2, row = 1) %<>%
#fill_panel(p2$"Mixed", column = 1, row = 2) %<>%
#fill_panel(p2$`2nd group`, column = 2, row = 2) %<>%
#fill_panel(p2$`3rd group`, column = 3, row = 2) %<>%
#fill_panel(p2$`4th group`, column = 2, row = 2)
#plot(figure1)
#par(mfrow=c(1,3), mar=c(4,4,4,1), oma=c(0.5,0.5,0.5,0))
#ppp<-grid.arrange(p1$`1st group`, p1$`2nd group`, p2$`1st group`, p2$`2nd group`)
#pppp<-grid.arrange(p1$`3rd group`, p1$`4th group`, p2$`3rd group`, p2$`4th group`)
#p<- grid.arrange(ppp, pppp, ncol=2)
o<- ordinate(ps, method="NMDS", distance=braydist)
knitr::opts_chunk$set(results = "hide")
theme_set(theme_bw(base_size = 20))
plot_ordination(ps,o , "samples", color="Diet", shape = 'Veg') + geom_point(size=2)+ xlim(-1, 1)+ ylim(-.5, .5)
#plot_ordination(ps,o , "samples", color="InterventionGroup", shape = 'StVisit') + geom_point(size=2)+ xlim(-1, 1)+ ylim(-.5, .5)
par(mfrow=c(1,4), mar=c(4,4,4,1), oma=c(0.5,0.5,0.5,0))
#theme_set(theme_bw(15))
method <- "PCoA"
trans <- "compositional"
distance <- "bray"
phy <- readRDS("data/processed/phyloseq/phy20.1.RDS")
ass <- 3
sample_data(phy)$community_type <- factor(ass[rownames(sample_data(phy))])
p <- plot_landscape(microbiome::transform(phy , "compositional"),
distance = distance,
method = method,
size = 3,
col = "community_type",
shading = FALSE) +
scale_colour_brewer(palette = "Set1")
print(p)
theme_set(theme_bw(base_size = 10))
library(BBmisc)
library(reshape2)
library("RColorBrewer")
library(tidyr)
set.seed(1234)
pso<- prune_taxa(taxa.order1, ps)
pso1<- microbiome::transform(pso, 'clr')
g<- otu_table(pso1)
g1<-BBmisc::normalize(g@.Data, 'standardize', range = c(0,1))
colnames(g1)<- colnames(otu_table(pso1)@.Data)
j<- otu_table(g1, taxa_are_rows = T)
otu_table(pso1)<- j
p <- list()
for(CST in CSTs) {
pshm <- prune_samples(sample_data(pso1)$CST == CST, pso1)
dfm <- melt(abundances(pshm))
colnames(dfm) <- c("Taxa", "Sample", "value")
p[[CST]]<- heat((dfm), "Sample","Taxa", "value", legend.text = "Abundance",order.rows = F,
order.cols = F, limits= c(-5,5), step = 0.5) + ggtitle(paste("CST:", CST))
print(p[[CST]])
}
theme_set(theme_bw(base_size = 20))
library(tidyr)
library(dplyr)
set.seed(1234)
library(ggbeeswarm)
pv<- c()
ppp<- list()
#ps<- readRDS('RDA/phylCLRstan21taxa.rds')
pso<- prune_taxa(taxa.order1, pso1)
taxa.order1<- taxa_names(pso1)
for (tax in rev(taxa.order1))
{
df<- meta(pso1)
df$taxa<- abundances(pso1)[tax,]
pv<- kruskal.test(taxa ~ CST, data = df)$p.value
ppp[[tax]]<- kruskal.test(taxa ~ CST, data = df)$p.value
padj.th <- 0.25
padj <- p.adjust(ppp)
df <- data.frame(tax = names(padj), padj = padj)
df <- df %>% filter(padj< padj.th)
df <- subset(df, select= c(padj, tax))
df$full_name <- full.names[df$tax]
rownames(df) <- NULL
library(knitr)
kable(df)
#t<- as.data.frame(tax)
#t<- separate(t, tax, into = c('1','2','3','4','5','genus'), sep = '_')
#t1<- as.character(t$genus)
#p<- ggplot(df, aes(x = CST, y = taxa))+ ylim(-5,5) + geom_beeswarm() + ggtitle(paste0(t1))+ ylab("")+ labs(title = paste0(t1)) +  geom_hline(yintercept=0, linetype="dashed", color = "gray")
p<- ggplot(df, aes(x = padj, y = tax)) + geom_boxplot() + geom_beeswarm()
print(p)
}
d <- data.frame(matrix(unlist(ppp), nrow=length(ppp), byrow=T))
#rownames(d)<-(rev(taxa.order))
d1<- p.adjust(d$matrix.unlist.ppp...nrow...length.ppp...byrow...T., 'BH')
d<- cbind(d, d1)
d4<- d
colnames(d)<- c('Kruskal_pvalue', 'adjusted_pvalue')
rownames(d4)<- rev(taxa.order1)
d4<-d4%>% filter(d1 <= 0.05)
t<- as.data.frame(taxa.order1)
t1<- separate(t, taxa.order1, into = c('1','2','3','4','5','6','genus'), sep = '_')
t1<- as.character(t1$genus)
#rownames(d)<- rev(t1)
#write.csv(d, 'Kruskal_tests.csv')
library(magrittr)
library(tidyverse)
d2<- subset(d, adjusted_pvalue <= .05)
#d2<- d2%>%arrange(desc(adjusted_pvalue))
write.csv(d2, 'Kruskal_tests.csv')
#library(knitr)
#d2<- d2[-d2$Kruskal_pvalue]
#d2<-d2 %>% arrange(adjusted_pvalue, desc(adjusted_pvalue)
#full.names <- apply(tax_table(d2), 1, function (x) {paste(x, collapse = "_")})
#df$full_name <- full.names[df$taxon]
#df <- df %>% filter(padj < 0.25) %>% arrange(padj)
#rownames(df) <- NULL
#kable(d2)
#library(knitr)
#d2<- d2[-d2$Kruskal_pvalue]
#d2<-d2 %>% arrange(adjusted_pvalue, desc(adjusted_pvalue)
#full.names <- apply(tax_table(d2), 1, function (x) {paste(x, collapse = "_")})
#df$full_name <- full.names[df$taxon]
#df <- df %>% filter(padj < 0.25) %>% arrange(padj)
#rownames(df) <- NULL
#kable(d2)
#ps<- readRDS('RDA/phylPlusCST.rds')
gg<- meta(ps)
df11<- subset(gg, CST==1 & Diet =="Veg")
df12<- subset(gg, CST==1& Diet =="Mixed")
#df21<- subset(gg, CST==2& StVisit ==1)
#df22<- subset(gg, CST==2& StVisit ==2)
#df31<- subset(gg, CST==3& StVisit ==1)
#df32<- subset(gg, CST==3& StVisit ==2)
df1<- subset(gg, CST==1); df1<- df1[, -seq(1:46)]
df2<- subset(gg, CST==2); df2<- df2[, -seq(1:46)]
df3<- subset(gg, CST==3); df3<- df3[, -seq(1:46)]
#df4<- subset(gg, CST==4); df4<- df4[, -seq(1:46)]
#df5<- subset(gg, CST==5); df5<- df5[, -seq(1:46)]
#dim(df1[1]) + dim(df2[1]) +dim(df3[1]) +dim(df4[1]) +dim(df5[1])
ddddf1<- c(round(dim(df11)[1]/dim(df1)[1] *100,1))
ddddf2<-c(round(dim(df12)[1]/dim(df1)[1]*100 ,1))
dfdf<- cbind(ddddf1, ddddf2)
rownames(dfdf)<- c('Clust.1')
colnames(dfdf)<- c('Veg','Mixed')
library(knitr)
kable(dfdf)
gh<- xtabs(~  CST +Diet, data = gg)
addmargins(gh)
ff<- fisher.test(gh)
print('Fisher exact test p-value is: ')
print(ff$p.value)
knitr::knit("CSTAnalysis_SkinSample.Rmd")
knitr::knit("CSTAnalysis_SkinSample.Rmd")
knitr::knit("CSTAnalysis_SkinSamples.Rmd")
library("phyloseq")
library("ggplot2")
library("cluster")
library("igraph")
library("markovchain")
library("RColorBrewer")
library(microbiome)
library("gridExtra")
library(tidyr)
library(dplyr)
set.seed(455423)
options(stringsAsFactors = FALSE)
theme_set(theme_bw())
# Init / Read data
ps <- readRDS("data/processed/phyloseq/phy20.1.RDS")
tt <- data.frame(tax_table(ps))
ps <- transform(ps, "compositional")
braydist <- phyloseq::distance(ps, method="bray")
ord <- ordinate(ps, method = "MDS", distance = braydist)
plot_scree(ord) + xlim(as.character(seq(1,15))) + ggtitle("MDS-bray ordination eigenvalues")
evs <- ord$value$Eigenvalues
print(evs[1:20])
print(tail(evs))
h_sub5 <- hist(evs[6:length(evs)], 100)
plot(h_sub5$mids, h_sub5$count, log="y", type='h', lwd=10, lend=2)
NDIM <- 7
x <- ord$vectors[,1:NDIM]  # rows=sample, cols=MDS axes, entries = value
pamPCoA = function(x, k) {
list(cluster = pam(x[,1:2], k, cluster.only = TRUE))
}
gs <- clusGap(x, FUN = pamPCoA, K.max = 12, B = 50)
plot_clusgap(gs) + scale_x_continuous(breaks=c(seq(0, 12, 2)))
K <- 3
x <- ord$vectors[,1:NDIM]
clust <- as.factor(pam(x, k=K, cluster.only=T))
# SWAPPING THE ASSIGNMENT OF 2 AND 3 TO MATCH RAVEL CST ENUMERATION
clust[clust==2] <- NA
clust[clust==3] <- 2
clust[is.na(clust)] <- 3
sample_data(ps)$CST <- clust
CSTs <- as.character(seq(K))
# Length 6 for consistency with pre-revision CST+ coloration
CSTColors <- brewer.pal(6,"Paired")[c(1,3,2,5,4,6)]
names(CSTColors) <- CSTs
CSTColorScale <- scale_colour_manual(name = "CST", values = CSTColors[1:5])
CSTFillScale <- scale_fill_manual(name = "CST", values = CSTColors[1:5])
ok <- ordinate(ps, method="NMDS", distance=braydist)
plot_ordination(ps, ok, color="CST") + CSTColorScale + ggtitle("NMDS -- bray -- CST")
plot_ordination(ps, ok, color="Geographical_location") + ggtitle("NMDS -- bray -- Location")
method <- "PCoA"
trans <- "compositional"
distance <- "bray"
p1 <- plot_landscape(microbiome::transform(ps , "compositional"),
distance = distance,
method = method,
size = 3,
col = "CST",
shading = FALSE) +
labs(title = "CST") +
scale_colour_brewer(palette = "Set1")
print(p1)
p2 <- plot_landscape(microbiome::transform(ps , "compositional"),
distance = distance,
method = method,
size = 3,
col = "Geographical_location",
shading = FALSE) +
labs(title = "Location") +
scale_colour_brewer(palette = "Set1")
print(p2)
theme_set(theme_bw(base_size = 20))
library(BBmisc)
library(reshape2)
library("RColorBrewer")
library(tidyr)
set.seed(1234)
# Identify ASVs that are potentially different between CSTs
pvs <- c()
for (tax in taxa(ps)) {
pvs[[tax]] <- kruskal.test(abundances(ps)[tax,] ~ meta(ps)$CST)$p.value
}
pvs <- sort(unlist(pvs))
significant.taxa <- names(pvs)[which(as.numeric(p.adjust(pvs)) < 0.25)]
# Pick full names for the taxa
full.names <- apply(tax_table(ps), 1, function (x) {paste(x, collapse = "_")})
pso<- prune_taxa(significant.taxa, ps)
pso1<- microbiome::transform(pso, 'clr')
g<- otu_table(pso1)
g1<-BBmisc::normalize(g@.Data, 'standardize', range = c(0,1))
colnames(g1)<- colnames(otu_table(pso1)@.Data)
j<- otu_table(g1, taxa_are_rows = T)
otu_table(pso1)<- j
p <- list()
sort.taxa <- neatsort(pso1, "rows")
for(CST in CSTs) {
pshm <- prune_samples(sample_data(pso1)$CST == CST, pso1)
dfm <- melt(abundances(pshm))
colnames(dfm) <- c("Taxa", "Sample", "value")
dfm$Taxa <- factor(dfm$Taxa, levels = sort.taxa)
dfm$Sample <- factor(dfm$Sample, levels = neatsort(pshm, "cols"))
p[[CST]]<- heat((dfm), "Sample","Taxa", "value", legend.text = "Abundance", order.rows = F,
order.cols = F, limits= c(-5,5), step = 0.5) +
ggtitle(paste("CST:", CST))
print(p[[CST]])
}
theme_set(theme_bw(base_size = 20))
library(ggbeeswarm)
df<- meta(pso)
for (tax in rev(significant.taxa)) {
# Pick the abundance values for the given taxonomic group ("tax")
# Let us use compositional transformed values
df$signal <- abundances(transform(pso, "compositional"))[tax,]
# Retrieve the full name for this taxon
tax.full.name <- full.names[tax]
# Plot taxon abundance (signal) against the cluster (CST) as a boxplot
p <- ggplot(df, aes(x = CST, y = signal)) +
labs(title = tax) +
geom_boxplot() +
geom_beeswarm() +
labs(y = "Relative abundance (%)") +
scale_y_log10(labels = scales::percent)
print(p)
}
#Initializing data frame
otu_vs_sample <- data.frame(matrix(ncol = length(df$taxon),nrow = length(abundances(ps)[1,])))
library(knitr)
library(knitcitations)
library(microbiome)
library(phyloseq)
library(ggplot2)
library(reshape2)
library(tidyverse)
library(dada2)
library(dplyr)
library(microbiome)
library(microbiome)
library(phyloseq)
library(vegan)
theme_set(theme_bw(20))
knitr::opts_chunk$set(fig.width=10, fig.height=10, message=FALSE, warning=FALSE)
knitr::opts_chunk$set(fig.path="figure_location/")
opts_chunk$set(dev="CairoPNG")
# Was created with: source("create_phyloseq.R")
phy <- readRDS("data/processed/phyloseq/phy20.1.RDS")
method <- "PCoA"
trans <- "compositional"
distance <- "bray"
index <- "diversity_shannon"
# Estimate alpha diversities
A <- alpha(phy)
library(Cairo)
df <- meta(phy)
df <- bind_cols(df, A)
df$index <- df[[index]]
pv <- kruskal.test(data = df, index ~ factor(Geographical_location))$p.value
library(ggbeeswarm)
p1 <- ggplot(df, aes(x = Geographical_location, y = index, fill = Geographical_location)) +
ggbeeswarm::geom_beeswarm() +
theme(axis.text.x = element_text(angle = 0, hjust = 1)) +
labs(y = "Shannon Diversity",
x = "",
title = paste0("Kruskal test p=", round(pv, 2)))
print(p1)
location <- meta(phy)$Geographical_location
#Clr-transformation
A <- abundances(microbiome::transform(phy, "clr"))
pv <- apply(A, 1, function (x) {kruskal.test(x ~ location)$p.value});
padj <- p.adjust(pv);
df <- data.frame(taxon = names(padj), padj = padj)
# Add full names for the taxa
full.names <- apply(tax_table(phy), 1, function (x) {paste(x, collapse = "_")})
df$full_name <- full.names[df$taxon]
df <- df %>% filter(padj < 0.25) %>% arrange(padj)
rownames(df) <- NULL
library(knitr)
kable(df)
ps <- microbiome::transform(phy, "clr")
d <- meta(ps)
for (tax in df$taxon) {
d$taxa <- abundances(ps)[tax, ]
p <- ggplot(d, aes(x = Geographical_location, y = taxa)) +
geom_boxplot() +
ggbeeswarm::geom_beeswarm() +
theme(axis.text.x = element_text(angle = 360, hjust = 1)) +
labs(x = "Location", y = "Abundance (CLR)", title = tax)
print(p)
}
#Initializing data frame
otu_vs_sample <- data.frame(matrix(ncol = length(df$taxon),nrow = length(abundances(ps)[1,])))
colnames(otu_vs_sample) <- df$taxon
rownames(otu_vs_sample) <- colnames(abundances(ps))
otu_vs_sample$location <- NA
#Collecting the data to data frame
for (i in c(1:length(df$taxon))){
for (j in c(1:length(abundances(ps)[1,]))){
#Abundances e.g. otu_vs_sample["I1", "OTU237"] <- abundances(ps)["OTU237", I1"]
otu_vs_sample[rownames(otu_vs_sample)[j],colnames(otu_vs_sample)[i]] <- abundances(ps)[colnames(otu_vs_sample)[i],rownames(otu_vs_sample)[j]]
#Location information e.g.  otu_vs_sample$location[1] <- d$Geographical_location[d$Sample == "I1"]
otu_vs_sample$location[j] <- d$Geographical_location[d$Sample == rownames(otu_vs_sample)[j]]
}
}
#Rownames to data frame's 1st column
library(data.table)
setDT(otu_vs_sample, keep.rownames = TRUE)[]
colnames(otu_vs_sample)[1] <- "Sample"
#Subsetting data by location
pune_data <- otu_vs_sample %>% filter(location == "Pune")
ahmednagar_data <- otu_vs_sample %>% filter(location == "Ahmednagar")
nashik_data <- otu_vs_sample %>% filter(location == "Nashik")
#Deletes location data
pune_data$location <- NULL
ahmednagar_data$location <- NULL
nashik_data$location <- NULL
#Changing data frames' format
pune_data <- melt(pune_data)
colnames(pune_data) <- c("Sample", "Taxa", "value")
ahmednagar_data <- melt(ahmednagar_data)
colnames(ahmednagar_data) <- c("Sample", "Taxa", "value")
nashik_data <- melt(nashik_data)
colnames(nashik_data) <- c("Sample", "Taxa", "value")
#Creating heatmaps
pune_heat <- heat(pune_data, "Sample","Taxa", "value", legend.text = "Abundance",order.rows = F,
order.cols = F, limits= c(-10,10), step = 1) + ggtitle("Pune") + theme(axis.text = element_text(size = 8), axis.text.x = element_blank(), plot.title = element_text(size = 8), legend.title = element_text(size = 8), legend.text = element_text(size = 8), legend.key.height = unit(1.5, "cm"))
ahmednagar_heat <- heat(ahmednagar_data, "Sample","Taxa", "value", legend.text = "Abundance",order.rows = F,
order.cols = F, limits= c(-10,10), step = 1) + ggtitle("Ahmednagar") + theme(axis.text = element_text(size = 8), axis.text.x = element_blank(), plot.title = element_text(size = 8), legend.title = element_text(size = 8), legend.text = element_text(size = 8), legend.key.height = unit(1.5, "cm"))
nashik_heat <- heat(nashik_data, "Sample","Taxa", "value", legend.text = "Abundance",order.rows = F,
order.cols = F, limits= c(-10,10), step = 1) + ggtitle("Nashik") + theme(axis.text = element_text(size = 8), axis.text.x = element_blank(), plot.title = element_text(size = 8), legend.title = element_text(size = 8), legend.text = element_text(size = 8), legend.key.height = unit(1.5, "cm"))
#Arranging heatmaps to one picture
library(cowplot)
heatmap_grid <- plot_grid(pune_heat + theme(legend.position="none"), ahmednagar_heat + theme(legend.position="none"), nashik_heat + theme(legend.position="none"), ncol = 3, axis = "t", scale = 0.85)
#Displaying the heatmaps and legend
heatmap_grid + draw_grob(get_legend(pune_heat+ theme(legend.position="bottom", legend.key.width = unit(2, "cm"), legend.key.height = unit(0.2, "cm"))), 0.5, -0.38, 0, 1)
